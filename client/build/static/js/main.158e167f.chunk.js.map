{"version":3,"sources":["store/dialogs/contracts/actionTypes.ts","assets/images/user/user-placeholder.png","store/dialogs/actionCreators.ts","store/types.ts","store/dialogs/selectors.ts","store/post/contracts/actionTypes.ts","store/user/selectors.ts","components/chat/ChatFriendsSideBar.tsx","components/Search.tsx","components/Header.tsx","components/NavigationSideBar.tsx","pages/Layout.tsx","components/Post/PostLike.tsx","store/post/selectors.ts","store/post/actionCreators.ts","store/posts/contracts/actionTypes.ts","components/ui/Loader.tsx","utils/emptyObject.ts","components/Post/AddComment.tsx","pages/FullPost/FullPost.tsx","store/posts/actionCreators.ts","store/posts/contracts/state.ts","store/user/contracts/actionTypes.ts","utils/uploadImage.ts","components/UploadImage.tsx","components/Post/CreatePost.tsx","components/Post/EditPostPopUp.tsx","components/Post/Post.tsx","store/posts/selectors.ts","pages/Home/Home.tsx","hoc/withAuthRedirect.tsx","assets/images/404.png","pages/PageNotFound.tsx","store/user/actionCreators.ts","assets/images/login-bg-2.jpg","pages/SignIn/SignIn.tsx","assets/images/login-bg.jpg","pages/SignUp/SignUp.tsx","components/User/UserBannerInfo.tsx","core/axios.ts","api/AuthApi.ts","pages/UserProfile/UserPage.tsx","store/messages/contracts/actionTypes.ts","pages/VerifyEmailUserPage.tsx","core/socket.ts","store/messages/actionCreators.ts","components/chat/chatDialogs/ChatUser.tsx","components/chat/chatDialogs/ChatDialogs.tsx","store/messages/selectors.ts","components/chat/chatMessages/ChatDialogProfile.tsx","components/chat/chatMessages/ChatMessage.tsx","components/chat/chatMessages/ChatMessageTyping.tsx","components/chat/chatMessages/ChatSendMessage.tsx","components/chat/chatMessages/СhatMessages.tsx","pages/Сhat/Chat.tsx","App.tsx","store/post/reducer.ts","store/user/reducer.ts","store/posts/reducer.ts","store/dialogs/reducer.ts","store/messages/reducer.ts","store/rootReducer.ts","api/ChatApi.ts","store/dialogs/sagas.ts","store/messages/sagas.ts","api/PostApi.ts","store/post/sagas.ts","store/posts/sagas.ts","store/user/sagas.ts","store/saga.ts","store/store.ts","index.tsx"],"names":["DialogsActionsType","LoadingStatus","UserStatus","fetchDialogs","type","FETCH_DIALOGS","setCurrentDialog","payload","SET_CURRENT_DIALOG","updateDialogNewMessages","UPDATE_DIALOG_NEW_MESSAGE","PostActionsType","selectDialogsState","state","dialogs","selectDialogs","selectIsDialogsLoaded","selectLoadingStatus","LOADED","selectCurrentDialog","currentDialog","selectUserState","user","selectUserData","data","selectMeId","userId","selectConfirmStatus","isConfirmed","selectUserStatus","status","selectAuthStatus","ChatFriendsSideBar","toggleChat","dispatch","useDispatch","isLoadingDialogs","useSelector","meId","React","useEffect","length","className","map","dialog","partner","_id","author","ChatFriendSideBar","to","src","avatar","PlaceHolderImg","alt","isOnline","fullname","Search","action","placeholder","Header","memo","handleToggleChat","location","useLocation","userData","splitLocation","pathname","split","href","onClick","NavigationSideBar","Layout","children","useState","setToggleChat","PostLikes","likes","postId","fetchToggleLikePost","likeId","setLikeId","useMemo","forEach","likeUser","style","cursor","handleTogglePostLike","trigger","closeOnDocumentClick","disabled","on","position","title","selectPost","post","selectPostsState","PostsActionsType","setPost","SET_POST","FETCH_TOGGLE_LIKE_POST","addCommentToPost","ADD_COMMENT_TO_POST","toggleLikePost","TOGGLE_LIKE_POST","Loader","cls","isEmpty","obj","prop","hasOwnProperty","JSON","stringify","AddComment","text","setText","handleClickAddComment","a","FETCH_ADD_COMMENT_TO_POST","alert","cols","rows","value","onChange","e","currentTarget","FullPost","createdAt","images","comments","FETCH_POST","format","Date","locale","ruLang","img","idx","comment","CreatePostState","addPost","ADD_POST","setPostsLoadingStatus","SET_LOADING_STATE","setAddFormState","SET_ADD_FORM_STATE","fetchPosts","FETCH_POSTS","UserActionsType","uploadImage","image","formData","FormData","append","axios","headers","console","log","UploadImage","onChangeImages","target","inputRef","useRef","handleChangeFileInput","useCallback","event","files","Array","prototype","call","file","fileObj","Blob","prev","blobUrl","URL","createObjectURL","current","addEventListener","removeEventListener","click","ref","id","hidden","multiple","CreatePost","setImages","targetElem","handleClickAddPost","result","LOADING","i","url","push","FETCH_ADD_POST","filter","EditPostPopUp","EditText","setEditText","handleEditText","handleSaveEditText","UPDATE_POST","modal","close","Post","nested","arrow","window","confirm","REMOVE_POST","posts","selectPosts","selectIsPostsLoading","Home","compose","Child","isAuth","loadingStatus","NEVER","isLoading","PageNotFound","notFoundImage","setUserData","SET_USER_DATA","setMeId","SET_ME_ID","verifyEmailStatus","VERIFY_EMAIL_STATUS","setUserLoadingStatus","LoginFormSchema","yup","shape","username","required","password","min","SignIn","history","useHistory","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","onSubmit","FETCH_SIGN_IN","SUCCESS","ERROR","LoginIMG","render","field","message","name","defaultValue","RegisterFormSchema","email","password2","oneOf","SignUp","setAvatar","FETCH_SIGN_UP","handleClickImage","RegisterIMG","UserBannerInfo","about","find","CREATE_DIALOG","interceptors","request","use","config","localStorage","getItem","AuthApi","verify","hash","get","signUp","postData","signIn","getMe","getUserInfo","MessageActionsType","UserProfile","match","isLoadingPosts","isLoadingUser","setLoadingUser","params","setUserId","then","VerifyEmailUserPage","pop","VERIFY_EMAIL","setTimeout","socket","io","origin","replace","setMessages","SET_MESSAGES","fetchMessages","FETCH_MESSAGES","fetchAddMessage","FETCH_ADD_MESSAGE","updateReadedStatus","UPDATE_MESSAGE_READ_STATUS","ChatUser","activeDialog","lastMessage","newMessages","isCountNewMessages","emit","isToday","count","ChatDialogs","selectMessagesState","messages","selectMessages","selectIsMessagesLoaded","ChatDialogProfile","ChatMessage","me","read","ChatMessageTyping","ChatSendMessage","dialogId","setMessage","onKeyUp","key","ChatMessages","isLoadingMessages","scrollMessages","typingUser","setTypingUser","typingTimeoutId","onNewMessage","ADD_MESSAGE","onFetchDialogs","dataTyping","clearInterval","off","scrollTo","Chat","includes","GET_DIALOG","App","FETCH_USER_DATA","path","component","exact","postReducer","produce","draft","some","like","deleteUserLike","splice","initialUserState","undefined","userReducer","SIGN_OUT","initialPostsState","addFormState","postLikeState","postsReducer","SET_POSTS","postIndex","findIndex","dialogsReducer","SET_DIALOGS","messagesReducer","rootReducer","combineReducers","ChatApi","partnerId","dialog_id","fetchDialogsRequest","fetchCreateDialogRequest","fetchGetDialogRequest","dialogsSaga","select","items","put","item","takeLatest","fetchMessagesRequest","fetchAddMessageRequest","messagesSaga","PostsApi","patch","delete","fetchPostRequest","fetchToggleLikePostRequest","fetchAddCommentToPostRequest","postSaga","userLike","userComment","fetchPostsRequest","fetchAddPostRequest","fetchRemovePostRequrest","fetchUpdatePostRequrest","fetchToggleLikePostRequrest","postsSaga","fetchSignUpRequest","fetchSignInRequest","fetchUserDataRequest","verifyEmailRequest","userSaga","setItem","token","UNAUTHORIZED","rootSaga","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.158e167f.chunk.js","sourcesContent":["import { DialogsState } from './state';\r\nimport { Action } from 'redux';\r\nimport { User } from '../../user/contracts/state';\r\n\r\nexport enum DialogsActionsType {\r\n  SET_DIALOGS = 'dialogs/SET_DIALOGS',\r\n  FETCH_DIALOGS = 'dialogs/FETCH_DIALOGS',\r\n  CREATE_DIALOG = 'dialogs/CREATE_DIALOG',\r\n  GET_DIALOG = 'dialogs/GET_DIALOG',\r\n  SET_CURRENT_DIALOG = 'dialog/SET_CURRENT_DIALOG',\r\n  UPDATE_DIALOG_NEW_MESSAGE = 'dialogs/UPDATE_DIALOG_NEW_MESSAGE',\r\n}\r\n\r\nexport interface SetDialogsActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.SET_DIALOGS;\r\n  payload: DialogsState['dialogs'];\r\n}\r\n\r\nexport interface FetchDialogsActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.FETCH_DIALOGS;\r\n}\r\n\r\nexport interface SetCurrentDialogActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.SET_CURRENT_DIALOG;\r\n  payload: {\r\n    id: string;\r\n    user: Pick<User, '_id' | 'fullname' | 'avatar'> | null;\r\n  };\r\n}\r\n\r\nexport interface GetDialogActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.GET_DIALOG;\r\n  payload: string;\r\n}\r\n\r\nexport interface CreateDialogActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.CREATE_DIALOG;\r\n  payload: string;\r\n}\r\n\r\nexport interface UpdateDialogNewMessageActionInterface extends Action<DialogsActionsType> {\r\n  type: DialogsActionsType.UPDATE_DIALOG_NEW_MESSAGE;\r\n  payload: string;\r\n}\r\n\r\nexport type DialogsActions =\r\n  | SetDialogsActionInterface\r\n  | FetchDialogsActionInterface\r\n  | CreateDialogActionInterface\r\n  | GetDialogActionInterface\r\n  | SetCurrentDialogActionInterface\r\n  | UpdateDialogNewMessageActionInterface;\r\n","export default __webpack_public_path__ + \"static/media/user-placeholder.157f088b.png\";","import { User } from '../user/contracts/state';\r\nimport {\r\n  DialogsActionsType,\r\n  SetDialogsActionInterface,\r\n  FetchDialogsActionInterface,\r\n  CreateDialogActionInterface,\r\n  UpdateDialogNewMessageActionInterface,\r\n  SetCurrentDialogActionInterface,\r\n  GetDialogActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { DialogsState } from './contracts/state';\r\n\r\nexport const setDialogs = (payload: DialogsState['dialogs']): SetDialogsActionInterface => ({\r\n  type: DialogsActionsType.SET_DIALOGS,\r\n  payload,\r\n});\r\n\r\nexport const fetchDialogs = (): FetchDialogsActionInterface => ({\r\n  type: DialogsActionsType.FETCH_DIALOGS,\r\n});\r\n\r\nexport const createDialog = (payload: string): CreateDialogActionInterface => ({\r\n  type: DialogsActionsType.CREATE_DIALOG,\r\n  payload,\r\n});\r\n\r\nexport const getDialog = (payload: string): GetDialogActionInterface => ({\r\n  type: DialogsActionsType.GET_DIALOG,\r\n  payload,\r\n});\r\n\r\nexport const setCurrentDialog = (payload: {\r\n  id: string;\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'> | null;\r\n}): SetCurrentDialogActionInterface => {\r\n  return {\r\n    type: DialogsActionsType.SET_CURRENT_DIALOG,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const updateDialogNewMessages = (\r\n  payload: string,\r\n): UpdateDialogNewMessageActionInterface => ({\r\n  type: DialogsActionsType.UPDATE_DIALOG_NEW_MESSAGE,\r\n  payload,\r\n});\r\n","export enum LoadingStatus {\r\n  LOADED = 'LOADED',\r\n  LOADING = 'LOADING',\r\n  ERROR = 'ERROR',\r\n  NEVER = 'NEVER',\r\n  SUCCESS = 'SUCCESS',\r\n}\r\n\r\nexport enum UserStatus {\r\n  UNAUTHORIZED = 'UNAUTHORIZED',\r\n}\r\n","import { DialogsState } from './contracts/state';\r\nimport { LoadingStatus } from '../types';\r\n\r\nimport { RootState } from '../store';\r\n\r\nexport const selectDialogsState = (state: RootState): DialogsState => state.dialogs;\r\n\r\nexport const selectLoadingStatus = (state: RootState): LoadingStatus =>\r\n  selectDialogsState(state).LoadingStatus;\r\n\r\nexport const selectDialogs = (state: RootState) => selectDialogsState(state).dialogs;\r\n\r\nexport const selectIsDialogsLoaded = (state: RootState): boolean =>\r\n  selectLoadingStatus(state) === LoadingStatus.LOADED;\r\n\r\nexport const selectCurrentDialog = (state: RootState) => selectDialogsState(state).currentDialog;\r\n","import { PostState } from './state';\r\nimport { Action } from 'redux';\r\nimport { User } from '../../user/contracts/state';\r\n\r\nexport enum PostActionsType {\r\n  SET_POST = 'post/SET_POST',\r\n  FETCH_POST = 'post/FETCH_POST',\r\n  FETCH_TOGGLE_LIKE_POST = 'post/FETCH_TOGGLE_LIKE_POST',\r\n  TOGGLE_LIKE_POST = 'post/TOGGLE_LIKE_POST',\r\n  ADD_COMMENT_TO_POST = 'post/ADD_COMMENT_TO_POST',\r\n  FETCH_ADD_COMMENT_TO_POST = 'post/FETCH_ADD_COMMENT_TO_POST',\r\n}\r\n\r\nexport interface SetPostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.SET_POST;\r\n  payload: PostState['post'];\r\n}\r\n\r\nexport interface FetchPostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.FETCH_POST;\r\n}\r\n\r\nexport interface FetchToggleLikePostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.FETCH_TOGGLE_LIKE_POST;\r\n  payload: string;\r\n}\r\n\r\nexport interface FetchCommentToPostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.FETCH_ADD_COMMENT_TO_POST;\r\n  payload: string;\r\n}\r\n\r\nexport interface AddCommentToPostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.ADD_COMMENT_TO_POST;\r\n  payload: {\r\n    user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n    text: string;\r\n  };\r\n}\r\n\r\nexport interface ToggleLikePostActionInterface extends Action<PostActionsType> {\r\n  type: PostActionsType.TOGGLE_LIKE_POST;\r\n  payload: {\r\n    user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n  };\r\n}\r\n\r\nexport type PostActions =\r\n  | SetPostActionInterface\r\n  | FetchPostActionInterface\r\n  | FetchToggleLikePostActionInterface\r\n  | ToggleLikePostActionInterface\r\n  | FetchCommentToPostActionInterface\r\n  | AddCommentToPostActionInterface;\r\n","import { UserState } from './contracts/state';\r\nimport { RootState } from './../store';\r\n\r\nexport const selectUserState = (state: RootState): UserState => state.user;\r\n\r\nexport const selectUserData = (state: RootState): UserState['data'] => selectUserState(state).data;\r\n\r\nexport const selectMeId = (state: RootState): UserState['userId'] => selectUserState(state).userId;\r\n\r\nexport const selectConfirmStatus = (state: RootState): UserState['isConfirmed'] =>\r\n  selectUserState(state).isConfirmed;\r\n\r\nexport const selectUserStatus = (state: RootState): UserState['status'] =>\r\n  selectUserState(state).status;\r\n\r\nexport const selectAuthStatus = (state: RootState): boolean => !!selectUserState(state).data;\r\n","import React from 'react';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchDialogs } from '../../store/dialogs/actionCreators';\r\nimport { selectDialogs, selectIsDialogsLoaded } from '../../store/dialogs/selectors';\r\nimport { selectMeId } from '../../store/user/selectors';\r\nimport { User } from '../../store/user/contracts/state';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IChatFriendSideBar {\r\n  _id: string;\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar' | 'isOnline'>;\r\n}\r\n\r\nexport const ChatFriendsSideBar: React.FC<any> = ({ toggleChat }) => {\r\n  const dispatch = useDispatch();\r\n  const isLoadingDialogs = useSelector(selectIsDialogsLoaded);\r\n  const dialogs = useSelector(selectDialogs);\r\n  const meId = useSelector(selectMeId);\r\n\r\n  React.useEffect(() => {\r\n    if (!isLoadingDialogs && dialogs.length === 0) {\r\n      dispatch(fetchDialogs());\r\n    }\r\n  }, [dispatch, toggleChat]);\r\n  return (\r\n    <div className={`chat-side ${toggleChat ? 'chat-side--active' : ''}`}>\r\n      <div className=\"chat-side__body\">\r\n        {isLoadingDialogs\r\n          ? dialogs.map((dialog) => (\r\n              <ChatFriendSideBar\r\n                user={meId === dialog.partner._id ? dialog.author : dialog.partner}\r\n                key={dialog._id}\r\n                {...dialog}\r\n              />\r\n            ))\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ChatFriendSideBar: React.FC<IChatFriendSideBar> = ({ _id, user }) => {\r\n  return (\r\n    <Link to={`/chat/dialog/${_id}`} className=\"chat-side__card\">\r\n      <div className=\"chat-side__avatar\">\r\n        <img src={user.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n        <span\r\n          className={`chat__status ${\r\n            user.isOnline ? 'chat__status--online' : 'chat__status--offline'\r\n          }`}></span>\r\n      </div>\r\n      <div className=\"chat-side__fullname\">\r\n        <h6>{user.fullname}</h6>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nexport const Search = (): React.ReactElement => {\r\n  return (\r\n    <div className=\"search\">\r\n      <form action=\"\" className=\"search__form\">\r\n        <div className=\"search__form-group\">\r\n          <BsSearch className=\"search__form-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Start typing to search..\"\r\n            className=\"search__form-input\"\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Search } from './Search';\r\nimport { BiHomeAlt } from 'react-icons/bi';\r\nimport { IoNotificationsOutline } from 'react-icons/io5';\r\nimport { RiChat4Line } from 'react-icons/ri';\r\nimport { CgProfile } from 'react-icons/cg';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUserData } from '../store/user/selectors';\r\n\r\ninterface IHeader {\r\n  handleToggleChat: () => void;\r\n}\r\n\r\nexport const Header: React.FC<IHeader> = React.memo(({ handleToggleChat }): React.ReactElement => {\r\n  const location = useLocation();\r\n  const userData = useSelector(selectUserData);\r\n  const { pathname } = location;\r\n  const splitLocation = pathname.split('/');\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__logo\">\r\n        <a href=\"/\">Social network</a>\r\n      </div>\r\n      <Search />\r\n      <div className=\"header__menu\">\r\n        <ul>\r\n          <li\r\n            className={\r\n              splitLocation[1] === ''\r\n                ? 'header__menu-item header__menu-item--active'\r\n                : 'header__menu-item'\r\n            }>\r\n            <Link to=\"/\">\r\n              <BiHomeAlt className=\"header__menu-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li className=\"header__menu-item\">\r\n            <Link to=\"/\">\r\n              <BiHomeAlt className=\"header__menu-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li className=\"header__menu-item\">\r\n            <Link to=\"/\">\r\n              <BiHomeAlt className=\"header__menu-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li className=\"header__menu-item\">\r\n            <Link to=\"/\">\r\n              <BiHomeAlt className=\"header__menu-icon\" />\r\n            </Link>\r\n          </li>\r\n          <li className=\"header__menu-item\">\r\n            <Link to=\"/\">\r\n              <BiHomeAlt className=\"header__menu-icon\" />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"header__inner\">\r\n        <div className=\"header__notification\">\r\n          <IoNotificationsOutline className=\"header__icon\" />\r\n        </div>\r\n\r\n        <div className=\"header__profile\">\r\n          <Link to={`/user/${userData?._id}`}>\r\n            <CgProfile className=\"header__icon\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className=\"header__chat gradient-primary\" onClick={handleToggleChat}>\r\n        <RiChat4Line />\r\n      </div>\r\n    </header>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { BiNews } from 'react-icons/bi';\r\nimport { SiOpenbadges } from 'react-icons/si';\r\nimport { FaWpexplorer } from 'react-icons/fa';\r\nimport { BsFillLightningFill, BsChatSquareDots } from 'react-icons/bs';\r\nimport { FiUser, FiSettings } from 'react-icons/fi';\r\nimport { Link } from 'react-router-dom';\r\nexport const NavigationSideBar = React.memo((): React.ReactElement => {\r\n  return (\r\n    <aside className=\"navigation\">\r\n      <nav className=\"navigation__content\">\r\n        <div className=\"navigation__wrap\">\r\n          <div className=\"navigation__caption\">Feeds</div>\r\n          <ul className=\"navigation__menu\">\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon gradient-blue\">\r\n                  <BiNews />\r\n                </div>\r\n\r\n                <span>Newsfeed</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon gradient-red\">\r\n                  <SiOpenbadges />\r\n                </div>\r\n\r\n                <span>Badges</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon gradient-gold\">\r\n                  <FaWpexplorer />\r\n                </div>\r\n\r\n                <span>Stories</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon gradient-pink\">\r\n                  <BsFillLightningFill />\r\n                </div>\r\n\r\n                <span>Groups</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon gradient-primary\">\r\n                  <FiUser />\r\n                </div>\r\n\r\n                <span>Profile</span>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"navigation__wrap\">\r\n          <div className=\"navigation__caption\">Account</div>\r\n          <ul className=\"navigation__menu\">\r\n            <li>\r\n              <Link to=\"/\">\r\n                <div className=\"navigation__icon\">\r\n                  <FiSettings className=\"gray\" />\r\n                </div>\r\n\r\n                <span>Settings</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/chat\">\r\n                <div className=\"navigation__icon\">\r\n                  <BsChatSquareDots className=\"gray\" />\r\n                </div>\r\n\r\n                <span>Chat</span>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </aside>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { ChatFriendsSideBar } from '../components/chat/ChatFriendsSideBar';\r\nimport { Header } from '../components/Header';\r\nimport { NavigationSideBar } from '../components/NavigationSideBar';\r\n\r\ninterface ILayout {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Layout: React.FC<ILayout> = ({ children }: ILayout): React.ReactElement => {\r\n  const [toggleChat, setToggleChat] = React.useState<boolean>(false);\r\n\r\n  const handleToggleChat = () => {\r\n    setToggleChat(!toggleChat);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header handleToggleChat={handleToggleChat} />\r\n      <NavigationSideBar />\r\n      <ChatFriendsSideBar toggleChat={toggleChat} />\r\n      <div className=\"main-content\">\r\n        <div className=\"main-content__inner\">{children}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { AiOutlineHeart } from 'react-icons/ai';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { User } from '../../store/user/contracts/state';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface IPostLikes {\r\n  likes?: Pick<User, '_id' | 'fullname' | 'avatar'>[] | undefined;\r\n  postId: string;\r\n  meId: string | null;\r\n  fetchToggleLikePost: (id: string) => void;\r\n}\r\n\r\nexport const PostLikes: React.FC<IPostLikes> = React.memo(\r\n  ({ likes, postId, meId, fetchToggleLikePost }) => {\r\n    const dispatch = useDispatch();\r\n    const [likeId, setLikeId] = React.useState<string>('');\r\n\r\n    React.useMemo(() => {\r\n      likes?.forEach((likeUser) => {\r\n        if (likeUser._id === meId) {\r\n          return setLikeId(postId);\r\n        }\r\n      });\r\n    }, [likes, meId, postId]);\r\n\r\n    const handleTogglePostLike = (postId: string): void => {\r\n      dispatch(fetchToggleLikePost(postId));\r\n      if (likeId === postId) {\r\n        setLikeId('');\r\n      } else {\r\n        setLikeId(postId);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className=\"post__actions-item\"\r\n        style={likes?.length !== 0 ? { cursor: 'pointer' } : { cursor: 'initial' }}>\r\n        <div\r\n          className=\"post__actions-item__inner gradient-blue\"\r\n          onClick={() => handleTogglePostLike(postId)}>\r\n          <AiOutlineHeart\r\n            className={`post__actions-icon post__actions-icon__heart ${\r\n              likeId ? 'post__actions-icon__heart--active' : null\r\n            }`}\r\n          />\r\n        </div>\r\n\r\n        <Popup\r\n          trigger={<div className=\"post__action-count\">{likes?.length} Like</div>}\r\n          closeOnDocumentClick\r\n          disabled={likes?.length === 0}\r\n          on={['hover']}\r\n          position=\"top center\"\r\n          className=\"post__actions-item\">\r\n          {likes?.map((likeUser) => (\r\n            <div key={likeUser.fullname}>\r\n              <Link to={`/user/${likeUser._id}`}>\r\n                <img\r\n                  src={likeUser?.avatar ? likeUser.avatar : PlaceHolderImg}\r\n                  title={likeUser.fullname}\r\n                  alt=\"\"\r\n                />\r\n              </Link>\r\n            </div>\r\n          ))}\r\n        </Popup>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import { PostState } from './contracts/state';\r\nimport { RootState } from '../store';\r\nexport const selectPostsState = (state: RootState): PostState => state.post;\r\n\r\nexport const selectPost = (state: RootState) => selectPostsState(state).post;\r\n","import { User } from '../user/contracts/state';\r\nimport {\r\n  SetPostActionInterface,\r\n  FetchPostActionInterface,\r\n  PostActionsType,\r\n  FetchToggleLikePostActionInterface,\r\n  ToggleLikePostActionInterface,\r\n  FetchCommentToPostActionInterface,\r\n  AddCommentToPostActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { PostState } from './contracts/state';\r\n\r\nexport const setPost = (payload: PostState['post']): SetPostActionInterface => ({\r\n  type: PostActionsType.SET_POST,\r\n  payload,\r\n});\r\n\r\nexport const fetchPost = (): FetchPostActionInterface => ({\r\n  type: PostActionsType.FETCH_POST,\r\n});\r\n\r\nexport const fetchToggleLikePost = (payload: string): FetchToggleLikePostActionInterface => ({\r\n  type: PostActionsType.FETCH_TOGGLE_LIKE_POST,\r\n  payload,\r\n});\r\n\r\nexport const fetchAddCommentToPost = (payload: string): FetchCommentToPostActionInterface => ({\r\n  type: PostActionsType.FETCH_ADD_COMMENT_TO_POST,\r\n  payload,\r\n});\r\n\r\nexport const addCommentToPost = (payload: {\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n  text: string;\r\n}): AddCommentToPostActionInterface => ({\r\n  type: PostActionsType.ADD_COMMENT_TO_POST,\r\n  payload,\r\n});\r\n\r\nexport const toggleLikePost = (payload: {\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n}): ToggleLikePostActionInterface => ({\r\n  type: PostActionsType.TOGGLE_LIKE_POST,\r\n  payload,\r\n});\r\n","import { IPost, PostsState, CreatePostState } from './state';\r\nimport { LoadingStatus } from './../../types';\r\nimport { Action } from 'redux';\r\nimport { User } from '../../user/contracts/state';\r\n\r\nexport enum PostsActionsType {\r\n  SET_POSTS = 'posts/SET_POSTS',\r\n\r\n  FETCH_POSTS = 'posts/FETCH_POSTS',\r\n  SET_LOADING_STATE = 'posts/SET_LOADING_STATE',\r\n  FETCH_ADD_POST = 'posts/FETCH_ADD_POST',\r\n  ADD_POST = 'posts/ADD_POST',\r\n  REMOVE_POST = 'posts/REMOVE_POST',\r\n  UPDATE_POST = 'posts/UPDATE_POST',\r\n  FETCH_TOGGLE_LIKE_POST = 'posts/FETCH_TOGGLE_LIKE_POST',\r\n  TOGGLE_LIKE_POST = 'posts/TOGGLE_LIKE_POST',\r\n  SET_ADD_FORM_STATE = 'posts/SET_ADD_FORM_STATE',\r\n}\r\n\r\nexport interface SetPostsActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.SET_POSTS;\r\n  payload: PostsState['posts'];\r\n}\r\n\r\nexport interface FetchAddPostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.FETCH_ADD_POST;\r\n  payload: {\r\n    text: string;\r\n    images: string[];\r\n  };\r\n}\r\n\r\nexport interface AddPostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.ADD_POST;\r\n  payload: IPost;\r\n}\r\nexport interface RemovePostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.REMOVE_POST;\r\n  payload: string;\r\n}\r\n\r\nexport interface FetchToggleLikePostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.FETCH_TOGGLE_LIKE_POST;\r\n  payload: string;\r\n}\r\n\r\nexport interface ToggleLikePostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.TOGGLE_LIKE_POST;\r\n  payload: {\r\n    id: string;\r\n    user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n  };\r\n}\r\n\r\nexport interface UpdatePostActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.UPDATE_POST;\r\n  payload: {\r\n    id: string;\r\n    text: string;\r\n  };\r\n}\r\n\r\nexport interface FetchPostsActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.FETCH_POSTS;\r\n}\r\n\r\nexport interface SetPostsLoadingStatusActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.SET_LOADING_STATE;\r\n  payload: LoadingStatus;\r\n}\r\n\r\nexport interface SetAddFormStateActionInterface extends Action<PostsActionsType> {\r\n  type: PostsActionsType.SET_ADD_FORM_STATE;\r\n  payload: CreatePostState;\r\n}\r\n\r\nexport type PostsActions =\r\n  | SetPostsActionInterface\r\n  | FetchAddPostActionInterface\r\n  | AddPostActionInterface\r\n  | RemovePostActionInterface\r\n  | UpdatePostActionInterface\r\n  | FetchPostsActionInterface\r\n  | FetchToggleLikePostActionInterface\r\n  | ToggleLikePostActionInterface\r\n  | SetPostsLoadingStatusActionInterface\r\n  | SetAddFormStateActionInterface;\r\n","import React from 'react';\r\n\r\ninterface ILoader {\r\n  cls?: string | null;\r\n}\r\n\r\nexport const Loader = ({ cls }: ILoader) => {\r\n  return (\r\n    <div className={`loader ${cls} `}>\r\n      <div className=\"loader__typing\"></div>\r\n    </div>\r\n  );\r\n};\r\n","export const isEmpty = (obj: object) => {\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n  return JSON.stringify(obj) === JSON.stringify({});\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchAddCommentToPost } from '../../store/post/actionCreators';\r\n\r\nexport const AddComment = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = React.useState<string>('');\r\n\r\n  const handleChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n    setText(e.currentTarget.value);\r\n  };\r\n\r\n  const handleClickAddComment = async (): Promise<void> => {\r\n    if (text !== '') {\r\n      dispatch(fetchAddCommentToPost(text));\r\n      setText('');\r\n    } else {\r\n      alert('Введите текст!');\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <textarea\r\n        className=\"post__comments-form\"\r\n        cols={30}\r\n        rows={10}\r\n        value={text}\r\n        onChange={handleChangeTextarea}></textarea>\r\n      <button className=\"post__comments-button\" onClick={handleClickAddComment}>\r\n        Add comment\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport format from 'date-fns/format';\r\nimport ruLang from 'date-fns/locale/ru';\r\nimport { Layout } from '../Layout';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\nimport { PostLikes } from '../../components/Post/PostLike';\r\nimport { FaRegComment } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectPost } from '../../store/post/selectors';\r\nimport { selectMeId } from '../../store/user/selectors';\r\nimport { fetchPost, fetchToggleLikePost } from '../../store/post/actionCreators';\r\nimport { Loader } from '../../components/ui/Loader';\r\nimport { isEmpty } from '../../utils/emptyObject';\r\nimport { AddComment } from '../../components/Post/AddComment';\r\n\r\nexport const FullPost = () => {\r\n  const post = useSelector(selectPost);\r\n  const { _id, createdAt, text, likes, user, images, comments } = post;\r\n\r\n  const meId = useSelector(selectMeId);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchPost());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <div className=\"container\">\r\n          {isEmpty(post) ? (\r\n            <Loader />\r\n          ) : (\r\n            <>\r\n              <div className=\"post\">\r\n                <div className=\"post__info\">\r\n                  <Link to={`/user/${user._id}`} className=\"post__user\">\r\n                    <div className=\"post__user-img\">\r\n                      <img src={user.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"post__user-info\">\r\n                      <div className=\"post__user-info-full\">{user.fullname}</div>\r\n                      <div className=\"post__user-info-date\">\r\n                        {format(new Date(createdAt), 'dd MMM. yyyy г.', { locale: ruLang })}\r\n                      </div>\r\n                    </div>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"post__text\">{text}</div>\r\n                {images?.length !== 0 && (\r\n                  <div className=\"post__images\">\r\n                    {images?.map((img, idx) => (\r\n                      <div key={idx}>\r\n                        <img src={img} alt=\"\" />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                <div className=\"post__actions\">\r\n                  <PostLikes\r\n                    postId={_id}\r\n                    likes={likes}\r\n                    meId={meId}\r\n                    fetchToggleLikePost={fetchToggleLikePost}\r\n                  />\r\n\r\n                  <div className=\"post__actions-item\">\r\n                    <div className=\"post__actions-item__inner gradient-red\">\r\n                      <FaRegComment className=\"post__actions-icon\" />\r\n                    </div>\r\n                    <div className=\"post__action-count\">{comments?.length} Comment</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"post__comments\">\r\n                <h3 className=\"post__title\">Comments</h3>\r\n\r\n                {comments?.length === 0 ? (\r\n                  <>\r\n                    <div className=\"post__comments-none\">be the first to leave a comment 😀</div>\r\n                    <AddComment />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {comments?.map((comment) => {\r\n                      return (\r\n                        <div className=\"post__comment\" key={comment.text}>\r\n                          <div className=\"post__comment-user\">\r\n                            <div className=\"post__comment-user__img\">\r\n                              <img\r\n                                src={comment.user.avatar ? comment.user.avatar : PlaceHolderImg}\r\n                                alt=\"\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"post__comment-user__fullname\">\r\n                              {comment.user.fullname}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"post__comment-text\">{comment.text}</div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                    <AddComment />\r\n                  </>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n","import { User } from '../user/contracts/state';\r\nimport { LoadingStatus } from './../types';\r\nimport {\r\n  SetPostsActionInterface,\r\n  PostsActionsType,\r\n  FetchAddPostActionInterface,\r\n  FetchPostsActionInterface,\r\n  RemovePostActionInterface,\r\n  SetAddFormStateActionInterface,\r\n  AddPostActionInterface,\r\n  SetPostsLoadingStatusActionInterface,\r\n  UpdatePostActionInterface,\r\n  FetchToggleLikePostActionInterface,\r\n  ToggleLikePostActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { PostsState, IPost, CreatePostState } from './contracts/state';\r\n\r\nexport const setPosts = (payload: PostsState['posts']): SetPostsActionInterface => ({\r\n  type: PostsActionsType.SET_POSTS,\r\n  payload,\r\n});\r\n\r\nexport const fetchAddPost = (payload: {\r\n  text: string;\r\n  images: string[];\r\n}): FetchAddPostActionInterface => ({\r\n  type: PostsActionsType.FETCH_ADD_POST,\r\n  payload,\r\n});\r\n\r\nexport const addPost = (payload: IPost): AddPostActionInterface => ({\r\n  type: PostsActionsType.ADD_POST,\r\n  payload,\r\n});\r\n\r\nexport const setPostsLoadingStatus = (\r\n  payload: LoadingStatus,\r\n): SetPostsLoadingStatusActionInterface => ({\r\n  type: PostsActionsType.SET_LOADING_STATE,\r\n  payload,\r\n});\r\n\r\nexport const setAddFormState = (payload: CreatePostState): SetAddFormStateActionInterface => ({\r\n  type: PostsActionsType.SET_ADD_FORM_STATE,\r\n  payload,\r\n});\r\n\r\nexport const removePost = (payload: string): RemovePostActionInterface => ({\r\n  type: PostsActionsType.REMOVE_POST,\r\n  payload,\r\n});\r\n\r\nexport const updatePost = (payload: { id: string; text: string }): UpdatePostActionInterface => ({\r\n  type: PostsActionsType.UPDATE_POST,\r\n  payload,\r\n});\r\n\r\nexport const fetchToggleLikePost = (payload: string): FetchToggleLikePostActionInterface => ({\r\n  type: PostsActionsType.FETCH_TOGGLE_LIKE_POST,\r\n  payload,\r\n});\r\n\r\nexport const toggleLikePost = (payload: {\r\n  id: string;\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n}): ToggleLikePostActionInterface => ({\r\n  type: PostsActionsType.TOGGLE_LIKE_POST,\r\n  payload,\r\n});\r\n\r\nexport const fetchPosts = (): FetchPostsActionInterface => ({\r\n  type: PostsActionsType.FETCH_POSTS,\r\n});\r\n","import { User } from './../../user/contracts/state';\r\nimport { LoadingStatus } from '../../types';\r\n\r\nexport enum CreatePostState {\r\n  LOADING = 'LOADING',\r\n  ERROR = 'ERROR',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\ninterface ICommentPost {\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n  text: string;\r\n}\r\n\r\nexport interface IPost {\r\n  _id: string;\r\n  text: string;\r\n  images?: string[] | undefined;\r\n  createdAt: string;\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n  likes?: Pick<User, '_id' | 'fullname' | 'avatar'>[] | undefined;\r\n  comments?: ICommentPost[] | null;\r\n}\r\n\r\nexport interface PostsState {\r\n  posts: IPost[];\r\n  LoadingStatus: LoadingStatus;\r\n  addFormState: CreatePostState;\r\n  postLikeState: LoadingStatus;\r\n}\r\n","import { LoadingStatus, UserStatus } from './../../types';\r\nimport { Action } from 'redux';\r\nimport { User, ISignUp } from './state';\r\n\r\nexport enum UserActionsType {\r\n  SET_USER_DATA = 'user/SET_USER_DATA',\r\n  SET_ME_ID = 'user/SET_ME_ID',\r\n  FETCH_SIGN_UP = 'user/FETCH_SIGN_UP',\r\n  FETCH_SIGN_IN = 'user/FETCH_SIGN_IN',\r\n  FETCH_USER_DATA = 'user/FETCH_USER_DATA',\r\n  SET_LOADING_STATE = 'user/SET_LOADING_STATE',\r\n  SIGN_OUT = 'user/SIGN_OUT',\r\n  VERIFY_EMAIL = 'user/VERIFY_EMAIL',\r\n  VERIFY_EMAIL_STATUS = '/user/VERIFY_EMAIL_STATUS',\r\n}\r\n\r\nexport interface SignOutActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.SIGN_OUT;\r\n}\r\n\r\nexport interface FetchSignInActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.FETCH_SIGN_IN;\r\n  payload: Pick<ISignUp, 'username' | 'password'>;\r\n}\r\n\r\nexport interface FetchSignUpActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.FETCH_SIGN_UP;\r\n  payload: ISignUp;\r\n}\r\n\r\nexport interface VerifyEmailActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.VERIFY_EMAIL;\r\n  payload: string;\r\n}\r\n\r\nexport interface SetVerifyEmailStatusActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.VERIFY_EMAIL_STATUS;\r\n  payload: boolean;\r\n}\r\n\r\nexport interface SetUserDataActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.SET_USER_DATA;\r\n  payload: User | undefined;\r\n}\r\n\r\nexport interface SetMeIdActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.SET_ME_ID;\r\n  payload: string;\r\n}\r\n\r\nexport interface SetUserLoadingStatusActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.SET_LOADING_STATE;\r\n  payload: LoadingStatus | UserStatus;\r\n}\r\nexport interface FetchUserDataActionInterface extends Action<UserActionsType> {\r\n  type: UserActionsType.FETCH_USER_DATA;\r\n}\r\n\r\nexport type UserActions =\r\n  | SetUserDataActionInterface\r\n  | SetMeIdActionInterface\r\n  | SetUserLoadingStatusActionInterface\r\n  | FetchUserDataActionInterface\r\n  | VerifyEmailActionInterface\r\n  | FetchSignUpActionInterface\r\n  | FetchSignInActionInterface\r\n  | SignOutActionInterface\r\n  | SetVerifyEmailStatusActionInterface;\r\n","import axios from 'axios';\r\n\r\ninterface UploadImageReturnProps {\r\n  height: number;\r\n  size: number;\r\n  url: string;\r\n  width: number;\r\n}\r\n\r\nexport const uploadImage = async (image: File): Promise<UploadImageReturnProps> => {\r\n  const formData = new FormData();\r\n  formData.append('image', image);\r\n\r\n  const { data } = await axios.post('/upload', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n\r\n  console.log(data);\r\n  return data;\r\n};\r\n","import React from 'react';\r\n\r\nexport interface ImageObj {\r\n  blobUrl: string;\r\n  file: File;\r\n}\r\n\r\ninterface IUploadImage {\r\n  children: React.ReactNode;\r\n  images: ImageObj[];\r\n  onChangeImages: (callback: (prev: ImageObj[]) => ImageObj[]) => void;\r\n  target: React.ReactElement;\r\n}\r\n\r\nexport const UploadImage: React.FC<IUploadImage> = ({\r\n  children,\r\n  onChangeImages,\r\n  target,\r\n}): React.ReactElement => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const handleClickImage = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.click();\r\n    }\r\n  };\r\n\r\n  const handleChangeFileInput = React.useCallback(\r\n    (event: Event) => {\r\n      if (event.target) {\r\n        const target = event.target as HTMLInputElement;\r\n        const files = target.files;\r\n\r\n        if (files?.length !== 0) {\r\n          Array.prototype.forEach.call(files, (file) => {\r\n            const fileObj = new Blob([file]);\r\n            onChangeImages((prev) => [\r\n              ...prev,\r\n              {\r\n                blobUrl: URL.createObjectURL(fileObj),\r\n                file,\r\n              },\r\n            ]);\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [onChangeImages],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.addEventListener('change', handleChangeFileInput);\r\n    }\r\n    return () => {\r\n      if (inputRef.current) {\r\n        inputRef.current.removeEventListener('change', handleChangeFileInput);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleClickImage} style={{ cursor: 'pointer' }}>\r\n        {target}\r\n      </div>\r\n      {children}\r\n      <input type=\"file\" ref={inputRef} id=\"upload-input\" hidden multiple />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BsX } from 'react-icons/bs';\r\nimport { FaRegEdit } from 'react-icons/fa';\r\nimport { HiOutlinePhotograph } from 'react-icons/hi';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchAddPost, setAddFormState } from '../../store/posts/actionCreators';\r\nimport { CreatePostState } from '../../store/posts/contracts/state';\r\nimport { uploadImage } from '../../utils/uploadImage';\r\nimport { ImageObj, UploadImage } from '../UploadImage';\r\nexport const CreatePost = (): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = React.useState<string>('');\r\n  const [images, setImages] = React.useState<ImageObj[]>([]);\r\n\r\n  const targetElem = (\r\n    <div className=\"create-post__add-image\">\r\n      <HiOutlinePhotograph className=\"create-post__add-image__icon\" />\r\n      Photo\r\n    </div>\r\n  );\r\n\r\n  const handleChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n    if (e.currentTarget) {\r\n      setText(e.currentTarget.value);\r\n    }\r\n  };\r\n\r\n  const removeImage = (url: string) => {\r\n    setImages(images.filter((obj) => obj.blobUrl !== url));\r\n  };\r\n\r\n  const handleClickAddPost = async (): Promise<void> => {\r\n    const result = [];\r\n    dispatch(setAddFormState(CreatePostState.LOADING));\r\n    for (let i = 0; i < images.length; i++) {\r\n      const file = images[i].file;\r\n\r\n      const { url } = await uploadImage(file);\r\n      result.push(url);\r\n    }\r\n    dispatch(fetchAddPost({ text, images: result }));\r\n    setText('');\r\n    setImages([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-post\">\r\n      <div className=\"create-post__title\" onClick={handleClickAddPost}>\r\n        <div className=\"create-post__title-icon\">\r\n          <FaRegEdit />\r\n        </div>\r\n        <span>Create Post</span>\r\n      </div>\r\n      <div className=\"create-post__body\">\r\n        <figure className=\"create-post__avatar\">\r\n          <img src=\"http://sociala.uitheme.net/assets/images/user-8.png\" alt=\"\" />\r\n        </figure>\r\n        <textarea\r\n          className=\"create-post__message\"\r\n          placeholder=\"What's on your mind?\"\r\n          cols={30}\r\n          rows={10}\r\n          onChange={handleChangeTextarea}\r\n          value={text}></textarea>\r\n        <UploadImage images={images} onChangeImages={setImages} target={targetElem}>\r\n          <div className=\"create-post__add-images\">\r\n            {images.map((img) => {\r\n              return (\r\n                <div className=\"create-post__add-images__inner\" key={img.blobUrl}>\r\n                  <div\r\n                    className=\"create-post__add-images__remove\"\r\n                    onClick={() => removeImage(img.blobUrl)}>\r\n                    <BsX />\r\n                  </div>\r\n                  <img src={img.blobUrl} alt=\"\" />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </UploadImage>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Popup from 'reactjs-popup';\r\nimport { updatePost } from '../../store/posts/actionCreators';\r\n\r\ninterface IEditPost {\r\n  id: string;\r\n  text: string;\r\n}\r\n\r\nexport const EditPostPopUp: React.FC<IEditPost> = ({ id, text }: IEditPost): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const [EditText, setEditText] = React.useState<string>(text);\r\n\r\n  const handleEditText = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n    if (e.currentTarget) {\r\n      setEditText(e.currentTarget.value);\r\n    }\r\n  };\r\n\r\n  const handleSaveEditText = (): void => {\r\n    dispatch(updatePost({ id, text: EditText }));\r\n  };\r\n\r\n  return (\r\n    <Popup className=\"edit-popup\" trigger={<div> Edit post </div>} modal>\r\n      {(close: any) => (\r\n        <>\r\n          <textarea\r\n            className=\"edit-popup__input\"\r\n            cols={30}\r\n            rows={10}\r\n            value={EditText}\r\n            onChange={handleEditText}></textarea>\r\n          <div className=\"edit-popup__inner\">\r\n            <button\r\n              onClick={() => {\r\n                handleSaveEditText();\r\n                close();\r\n              }}\r\n              className=\"edit-popup__button button gradient-primary\">\r\n              Update Post\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Popup>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\nimport { FaRegComment } from 'react-icons/fa';\r\nimport { IPost } from '../../store/posts/contracts/state';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchToggleLikePost, removePost } from '../../store/posts/actionCreators';\r\nimport { EditPostPopUp } from './EditPostPopUp';\r\nimport format from 'date-fns/format';\r\nimport ruLang from 'date-fns/locale/ru';\r\nimport { Link } from 'react-router-dom';\r\nimport { selectMeId } from '../../store/user/selectors';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\nimport { PostLikes } from './PostLike';\r\nimport { setPost } from '../../store/post/actionCreators';\r\n\r\nexport const Post = React.memo(\r\n  ({ _id, text, createdAt, user, images, likes, comments }: IPost): React.ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const meId = useSelector(selectMeId);\r\n\r\n    const handleRemove = (event: React.MouseEvent<HTMLElement>): void => {\r\n      if (window.confirm('Вы действительно хотите удалить твит?')) {\r\n        dispatch(removePost(_id));\r\n      }\r\n    };\r\n\r\n    const handleSetPost = () => {\r\n      dispatch(\r\n        setPost({\r\n          _id,\r\n          createdAt,\r\n          text,\r\n          images,\r\n          user,\r\n          likes,\r\n        }),\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className=\"post\">\r\n        <div className=\"post__info\">\r\n          <Link to={`/user/${user._id}`} className=\"post__user\">\r\n            <div className=\"post__user-img\">\r\n              <img src={user.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n            </div>\r\n            <div className=\"post__user-info\">\r\n              <div className=\"post__user-info-full\">{user.fullname}</div>\r\n              <div className=\"post__user-info-date\">\r\n                {format(new Date(createdAt), 'dd MMM. yyyy г.', { locale: ruLang })}\r\n              </div>\r\n            </div>\r\n          </Link>\r\n\r\n          {meId === user._id ? (\r\n            <div className=\"post__func\">\r\n              <Popup\r\n                trigger={\r\n                  <div className=\"post__func-button\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </div>\r\n                }\r\n                position=\"right center\"\r\n                nested\r\n                className=\"post__func\"\r\n                arrow={false}>\r\n                <div onClick={handleRemove}>Delete post</div>\r\n                <EditPostPopUp id={_id} text={text} />\r\n              </Popup>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"post__text\">\r\n          {text}\r\n          <Link to={`/post/${_id}`} onClick={handleSetPost} className=\"post__see-more\">\r\n            See more\r\n          </Link>\r\n        </div>\r\n        {images?.length !== 0 && (\r\n          <div className=\"post__images\">\r\n            {images?.map((img, idx) => (\r\n              <div key={idx}>\r\n                <img src={img} alt=\"\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        <div className=\"post__actions\">\r\n          <PostLikes\r\n            postId={_id}\r\n            likes={likes}\r\n            meId={meId}\r\n            fetchToggleLikePost={fetchToggleLikePost}\r\n          />\r\n\r\n          <Link to={`/post/${_id}`} className=\"post__actions-item\">\r\n            <div className=\"post__actions-item__inner gradient-red\">\r\n              <FaRegComment className=\"post__actions-icon\" />\r\n            </div>\r\n            <div className=\"post__action-count\">{comments?.length} Comment</div>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import { LoadingStatus } from './../types';\r\nimport { PostsState, CreatePostState } from './contracts/state';\r\nimport { RootState } from './../store';\r\nexport const selectPostsState = (state: RootState): PostsState => state.posts;\r\n\r\nexport const selectLoadingStatus = (state: RootState): LoadingStatus =>\r\n  selectPostsState(state).LoadingStatus;\r\n\r\nexport const selectAddFormState = (state: RootState): CreatePostState =>\r\n  selectPostsState(state).addFormState;\r\n\r\nexport const selectPostLikeState = (state: RootState): LoadingStatus =>\r\n  selectPostsState(state).postLikeState;\r\n\r\nexport const selectPosts = (state: RootState) => selectPostsState(state).posts;\r\n\r\nexport const selectIsPostsLoading = (state: RootState): boolean =>\r\n  selectLoadingStatus(state) === LoadingStatus.LOADING;\r\n\r\nexport const selectIsPostsLoaded = (state: RootState): boolean =>\r\n  selectLoadingStatus(state) === LoadingStatus.LOADED;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { CreatePost } from '../../components/Post/CreatePost';\r\nimport { Post } from '../../components/Post/Post';\r\nimport { Loader } from '../../components/ui/Loader';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { fetchPosts } from '../../store/posts/actionCreators';\r\nimport { selectIsPostsLoading, selectPosts } from '../../store/posts/selectors';\r\nimport { Layout } from '../Layout';\r\n\r\nexport const HomePage = (): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(selectPosts);\r\n  const isLoading = useSelector(selectIsPostsLoading);\r\n  React.useEffect(() => {\r\n    dispatch(fetchPosts());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <div className=\"container\">\r\n          <CreatePost />\r\n          {isLoading ? (\r\n            <Loader />\r\n          ) : (\r\n            posts.map((post) => <Post key={post._id} images={post.images} {...post} />)\r\n          )}\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Home = compose(withAuthRedirect)(HomePage);\r\n","import { Redirect } from 'react-router-dom';\r\nimport { selectAuthStatus, selectUserStatus } from '../store/user/selectors';\r\nimport { useSelector } from 'react-redux';\r\nimport React from 'react';\r\nimport { LoadingStatus } from '../store/types';\r\nimport { Loader } from '../components/ui/Loader';\r\n\r\nexport const withAuthRedirect = (Child: any) => {\r\n  return () => {\r\n    const isAuth = useSelector(selectAuthStatus);\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n    const isReady =\r\n      loadingStatus !== LoadingStatus.NEVER && loadingStatus !== LoadingStatus.LOADING;\r\n\r\n    if (isReady) {\r\n      if (!isAuth) {\r\n        return <Redirect to=\"/signin\" />;\r\n      } else {\r\n        return <Child />;\r\n      }\r\n    } else {\r\n      return <Loader />;\r\n    }\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/404.d6ed9b80.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport notFoundImage from '../assets/images/404.png';\r\nexport const PageNotFound = () => {\r\n  return (\r\n    <div className=\"not-found\">\r\n      <div className=\"not-found__img\">\r\n        <img src={notFoundImage} alt=\"\" />\r\n      </div>\r\n      <div className=\"not-found__title\">Oops! It looks like you're lost.</div>\r\n      <div className=\"not-found__text\">\r\n        The page you're looking for isn't available. Try to search again or use the go to.\r\n      </div>\r\n\r\n      <Link to=\"/\" className=\"not-found__button\">\r\n        Home Page\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  FetchSignUpActionInterface,\r\n  SetUserDataActionInterface,\r\n  SetUserLoadingStatusActionInterface,\r\n  FetchUserDataActionInterface,\r\n  UserActionsType,\r\n  SignOutActionInterface,\r\n  VerifyEmailActionInterface,\r\n  FetchSignInActionInterface,\r\n  SetVerifyEmailStatusActionInterface,\r\n  SetMeIdActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { UserState, ISignUp } from './contracts/state';\r\n\r\nexport const setUserData = (payload: UserState['data']): SetUserDataActionInterface => ({\r\n  type: UserActionsType.SET_USER_DATA,\r\n  payload,\r\n});\r\n\r\nexport const setMeId = (payload: string): SetMeIdActionInterface => ({\r\n  type: UserActionsType.SET_ME_ID,\r\n  payload,\r\n});\r\n\r\nexport const signOut = (): SignOutActionInterface => ({\r\n  type: UserActionsType.SIGN_OUT,\r\n});\r\n\r\nexport const fetchUserData = (): FetchUserDataActionInterface => ({\r\n  type: UserActionsType.FETCH_USER_DATA,\r\n});\r\n\r\nexport const verifyEmailUser = (payload: string): VerifyEmailActionInterface => ({\r\n  type: UserActionsType.VERIFY_EMAIL,\r\n  payload,\r\n});\r\n\r\nexport const verifyEmailStatus = (payload: boolean): SetVerifyEmailStatusActionInterface => ({\r\n  type: UserActionsType.VERIFY_EMAIL_STATUS,\r\n  payload,\r\n});\r\n\r\nexport const fetchSignUp = (payload: ISignUp): FetchSignUpActionInterface => ({\r\n  type: UserActionsType.FETCH_SIGN_UP,\r\n  payload,\r\n});\r\n\r\nexport const fetchSignIn = (\r\n  payload: Pick<ISignUp, 'username' | 'password'>,\r\n): FetchSignInActionInterface => ({\r\n  type: UserActionsType.FETCH_SIGN_IN,\r\n  payload,\r\n});\r\n\r\nexport const setUserLoadingStatus = (\r\n  payload: UserState['status'],\r\n): SetUserLoadingStatusActionInterface => ({\r\n  type: UserActionsType.SET_LOADING_STATE,\r\n  payload,\r\n});\r\n","export default __webpack_public_path__ + \"static/media/login-bg-2.8165691c.jpg\";","import React from 'react';\r\nimport { AiOutlineUser } from 'react-icons/ai';\r\nimport { RiLockPasswordLine } from 'react-icons/ri';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { fetchSignIn } from '../../store/user/actionCreators';\r\nimport LoginIMG from '../../assets/images/login-bg-2.jpg';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { ISignUp } from '../../store/user/contracts/state';\r\nimport { selectUserStatus } from '../../store/user/selectors';\r\nimport { LoadingStatus } from '../../store/types';\r\n\r\nconst LoginFormSchema = yup.object().shape({\r\n  username: yup.string().required('Enter login'),\r\n  password: yup.string().min(6, '​Minimum password length 6 characters').required(),\r\n});\r\n\r\nexport const SignIn = (): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const loadingStatus = useSelector(selectUserStatus);\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<Pick<ISignUp, 'username' | 'password'>>({\r\n    resolver: yupResolver(LoginFormSchema),\r\n  });\r\n\r\n  const onSubmit = async (data: Pick<ISignUp, 'username' | 'password'>) => {\r\n    dispatch(fetchSignIn(data));\r\n  };\r\n  React.useEffect(() => {\r\n    if (loadingStatus === LoadingStatus.SUCCESS) {\r\n      alert('Авторизация успешна!');\r\n      history.push('/');\r\n    } else if (loadingStatus === LoadingStatus.ERROR) {\r\n      alert('Неверный логин или пароль');\r\n    }\r\n  }, [loadingStatus]);\r\n  return (\r\n    <div className=\"user-auth user-login\">\r\n      <div className=\"user-auth__image\">\r\n        <img src={LoginIMG} alt=\"\" />\r\n      </div>\r\n      <div className=\"user-auth__form\">\r\n        <div className=\"user-auth__buttons\">\r\n          <Link to=\"/signin\" className=\"active\">\r\n            Login\r\n          </Link>\r\n          <Link to=\"/signup\">Register</Link>\r\n        </div>\r\n        <div className=\"user-auth__inner user-login__inner\">\r\n          <div className=\"user-auth__title\">\r\n            Create\r\n            <br />\r\n            your account\r\n          </div>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <AiOutlineUser />\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        placeholder=\"username\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.username ? (\r\n                      <div className=\"input__error\">{errors.username?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"username\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <RiLockPasswordLine />\r\n                      </div>\r\n                      <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"password\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.password ? (\r\n                      <div className=\"input__error\">{errors.password?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"password\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n\r\n            <button className=\"user-auth__button\" type=\"submit\">\r\n              SignIn\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/login-bg.d4611e2f.jpg\";","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSignUp } from '../../store/user/actionCreators';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport RegisterIMG from '../../assets/images/login-bg.jpg';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { AiOutlineInfoCircle, AiOutlineMail, AiOutlineUser } from 'react-icons/ai';\r\nimport { GoLocation } from 'react-icons/go';\r\nimport { CgUserList } from 'react-icons/cg';\r\nimport { RiLockPasswordLine } from 'react-icons/ri';\r\nimport { ISignUp } from '../../store/user/contracts/state';\r\nimport { selectUserStatus } from '../../store/user/selectors';\r\nimport { LoadingStatus } from '../../store/types';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\nimport { MdAddAPhoto } from 'react-icons/md';\r\nimport { ImageObj } from '../../components/UploadImage';\r\nimport { BsX } from 'react-icons/bs';\r\nimport { uploadImage } from '../../utils/uploadImage';\r\nconst RegisterFormSchema = yup.object().shape({\r\n  fullname: yup.string().required('Please enter your name'),\r\n  email: yup.string().email('Invalid mail').required('Enter mail'),\r\n  username: yup.string().required('Enter login'),\r\n  password: yup.string().min(6, '​Minimum password length 6 characters').required(),\r\n  password2: yup.string().oneOf([yup.ref('password')], 'Passwords do not match'),\r\n});\r\n\r\nexport const SignUp = (): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const loadingStatus = useSelector(selectUserStatus);\r\n  const [avatar, setAvatar] = React.useState<ImageObj | null>(null);\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<ISignUp>({\r\n    resolver: yupResolver(RegisterFormSchema),\r\n  });\r\n\r\n  const onSubmit = async (data: ISignUp) => {\r\n    if (avatar) {\r\n      const { url } = await uploadImage(avatar?.file as File);\r\n      data.avatar = url;\r\n    }\r\n\r\n    dispatch(fetchSignUp(data));\r\n  };\r\n\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const handleClickImage = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.click();\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (loadingStatus === LoadingStatus.SUCCESS) {\r\n      alert('Регистрация успешна!');\r\n      history.push('/');\r\n    } else if (loadingStatus === LoadingStatus.ERROR) {\r\n      alert('Ошибка при регистрации!');\r\n    }\r\n  }, [loadingStatus]);\r\n\r\n  return (\r\n    <div className=\"user-auth\">\r\n      <div className=\"user-auth__image\">\r\n        <img src={RegisterIMG} alt=\"\" />\r\n      </div>\r\n      <div className=\"user-auth__form\">\r\n        <div className=\"user-auth__buttons\">\r\n          <Link to=\"/signin\">Login</Link>\r\n          <Link to=\"/signup\" className=\"active\">\r\n            Register\r\n          </Link>\r\n        </div>\r\n        <div className=\"user-auth__inner\">\r\n          <div className=\"user-auth__title\">\r\n            Create\r\n            <br />\r\n            your account\r\n          </div>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"user-auth__upload-avatar\">\r\n              <img src={avatar ? avatar.blobUrl : PlaceHolderImg} alt=\"\" />\r\n              {avatar ? (\r\n                <span className=\"user-auth__upload-avatar-remove\" onClick={() => setAvatar(null)}>\r\n                  <BsX />\r\n                </span>\r\n              ) : null}\r\n              <Controller\r\n                control={control}\r\n                render={() => (\r\n                  <span className=\"user-auth__upload-avatar-icon\" onClick={handleClickImage}>\r\n                    <MdAddAPhoto />\r\n                    <input\r\n                      onChange={(e) => {\r\n                        const file = e.target.files?.[0] as File;\r\n                        const fileObj = new Blob([file]);\r\n                        setAvatar({\r\n                          blobUrl: URL.createObjectURL(fileObj),\r\n                          file,\r\n                        });\r\n                      }}\r\n                      ref={inputRef}\r\n                      type=\"file\"\r\n                      hidden\r\n                    />\r\n                  </span>\r\n                )}\r\n                name=\"avatar\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <AiOutlineMail />\r\n                      </div>\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"email\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n\r\n                    {!!errors.email ? (\r\n                      <div className=\"input__error\">{errors.email?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"email\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <AiOutlineUser />\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        placeholder=\"username\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.username ? (\r\n                      <div className=\"input__error\">{errors.username?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"username\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <CgUserList />\r\n                      </div>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"fullname\"\r\n                        placeholder=\"fullname\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.fullname ? (\r\n                      <div className=\"input__error\">{errors.fullname?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"fullname\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <RiLockPasswordLine />\r\n                      </div>\r\n                      <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"password\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.password ? (\r\n                      <div className=\"input__error\">{errors.password?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"password\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <>\r\n                    <div className=\"input__wrapper\">\r\n                      <div className=\"input__wrapper-icon\">\r\n                        <RiLockPasswordLine />\r\n                      </div>\r\n                      <input\r\n                        type=\"password\"\r\n                        id=\"password2\"\r\n                        placeholder=\"password2\"\r\n                        className=\"input\"\r\n                        {...field}\r\n                      />\r\n                    </div>\r\n                    {!!errors.password2 ? (\r\n                      <div className=\"input__error\">{errors.password2?.message}</div>\r\n                    ) : null}\r\n                  </>\r\n                )}\r\n                control={control}\r\n                name=\"password2\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <div className=\"input__wrapper\">\r\n                    <div className=\"input__wrapper-icon\">\r\n                      <AiOutlineInfoCircle />\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"about\"\r\n                      placeholder=\"about\"\r\n                      className=\"input\"\r\n                      {...field}\r\n                    />\r\n                  </div>\r\n                )}\r\n                control={control}\r\n                name=\"about\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Controller\r\n                render={({ field }) => (\r\n                  <div className=\"input__wrapper\">\r\n                    <div className=\"input__wrapper-icon\">\r\n                      <GoLocation />\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"location\"\r\n                      placeholder=\"location\"\r\n                      className=\"input\"\r\n                      {...field}\r\n                    />\r\n                  </div>\r\n                )}\r\n                control={control}\r\n                name=\"location\"\r\n                defaultValue=\"\"\r\n              />\r\n            </div>\r\n            <button\r\n              disabled={loadingStatus === LoadingStatus.LOADING}\r\n              className=\"user-auth__button\"\r\n              type=\"submit\">\r\n              Register\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport PlaceHolderImg from '../../assets/images/user/user-placeholder.png';\r\n\r\nimport { createDialog } from '../../store/dialogs/actionCreators';\r\nimport { IDialog } from '../../store/dialogs/contracts/state';\r\n\r\ninterface IUserInfo {\r\n  _id?: string;\r\n  fullname?: string;\r\n  email?: string;\r\n  location?: string;\r\n  about?: string;\r\n  avatar?: string;\r\n  dialogs?: IDialog[];\r\n  meId: string | null;\r\n}\r\n\r\nexport const UserBannerInfo = ({\r\n  _id,\r\n  fullname,\r\n  email,\r\n  location,\r\n  about,\r\n  avatar,\r\n  dialogs,\r\n  meId,\r\n}: IUserInfo) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCreateDialog = () => {\r\n    if (_id) {\r\n      dispatch(createDialog(_id));\r\n    }\r\n  };\r\n\r\n  const dialog = dialogs?.find((dialog) => dialog.author._id === _id || dialog.partner._id === _id);\r\n\r\n  return (\r\n    <div className=\"user-banner\">\r\n      <figure className=\"user-banner__avatar\">\r\n        <img src={avatar ? avatar : PlaceHolderImg} alt=\"\" />\r\n      </figure>\r\n      <div className=\"user-banner__inner\">\r\n        <div className=\"user-banner__info\">\r\n          <h1>{fullname}</h1>\r\n          <h4>{email}</h4>\r\n        </div>\r\n        {location && <div className=\"user-banner__location\">{location}</div>}\r\n      </div>\r\n      {about && <div className=\"user-banner__about\">{about}</div>}\r\n\r\n      {meId !== _id &&\r\n        (dialog ? (\r\n          <Link to={`/chat/dialog/${dialog._id}`} className=\"user-banner__button gradient-blue\">\r\n            Написать сообщение\r\n          </Link>\r\n        ) : (\r\n          <div onClick={handleCreateDialog} className=\"user-banner__button gradient-blue\">\r\n            {' '}\r\n            Начать диалог\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\naxios.interceptors.request.use((config) => {\r\n  config.headers['token'] = window.localStorage.getItem('token');\r\n  return config;\r\n});\r\n\r\nexport { axios };\r\n","import { axios } from '../core/axios';\r\nimport { ISignUp } from './../store/user/contracts/state';\r\n\r\ninterface ResponseApi {\r\n  status: string;\r\n  data: any;\r\n}\r\n\r\nexport const AuthApi = {\r\n  async verify(hash: string): Promise<ResponseApi> {\r\n    const { data } = await axios.get<ResponseApi>('/auth/verify?hash=' + hash);\r\n    console.log(data);\r\n    return data;\r\n  },\r\n\r\n  async signUp(postData: ISignUp): Promise<ResponseApi> {\r\n    const { data } = await axios.post<ResponseApi>('/auth/register', {\r\n      email: postData.email,\r\n      username: postData.username,\r\n      fullname: postData.fullname,\r\n      password: postData.password,\r\n      password2: postData.password2,\r\n      about: postData.about,\r\n      avatar: postData.avatar,\r\n      location: postData.location,\r\n    });\r\n    return data;\r\n  },\r\n  async signIn(postData: Pick<ISignUp, 'username' | 'password'>): Promise<ResponseApi> {\r\n    const { data } = await axios.post<ResponseApi>('/auth/login', {\r\n      username: postData.username,\r\n      password: postData.password,\r\n    });\r\n    return data;\r\n  },\r\n\r\n  async getMe(): Promise<ResponseApi> {\r\n    const { data } = await axios.get<ResponseApi>('/users/me');\r\n    return data;\r\n  },\r\n\r\n  async getUserInfo(userId: string): Promise<ResponseApi> {\r\n    const { data } = await axios.get<ResponseApi>('/users/' + userId);\r\n    return data;\r\n  },\r\n};\r\n\r\n// @ts-ignore\r\nwindow.AuthApi = AuthApi;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { CreatePost } from '../../components/Post/CreatePost';\r\nimport { Loader } from '../../components/ui/Loader';\r\nimport { selectIsPostsLoading, selectPosts } from '../../store/posts/selectors';\r\nimport { User } from '../../store/user/contracts/state';\r\nimport { Layout } from '../Layout';\r\nimport { Post } from '../../components/Post/Post';\r\nimport { UserBannerInfo } from '../../components/User/UserBannerInfo';\r\nimport { fetchPosts } from '../../store/posts/actionCreators';\r\nimport { AuthApi } from '../../api/AuthApi';\r\nimport { selectMeId } from '../../store/user/selectors';\r\n\r\nexport const UserProfile: React.FC<RouteComponentProps<{ id: string }>> = ({ match }) => {\r\n  const posts = useSelector(selectPosts);\r\n  const dispatch = useDispatch();\r\n  const isLoadingPosts = useSelector(selectIsPostsLoading);\r\n  const [isLoadingUser, setLoadingUser] = React.useState<boolean>(true);\r\n  const meId = useSelector(selectMeId);\r\n  const [userData, setUserData] = React.useState<User>();\r\n  const [userId, setUserId] = React.useState<string | null>(match.params.id);\r\n\r\n  if (match.params.id !== userId) {\r\n    setUserId(match.params.id);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchPosts());\r\n    if (userId) {\r\n      AuthApi.getUserInfo(userId).then(({ data }) => {\r\n        setUserData(data);\r\n        setLoadingUser(false);\r\n      });\r\n    }\r\n  }, [dispatch, userId]);\r\n\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <div className=\"container\">\r\n          {isLoadingUser ? <Loader /> : <UserBannerInfo {...userData} meId={meId} />}\r\n          {meId === userId ? <CreatePost /> : null}\r\n          {isLoadingPosts ? (\r\n            <Loader />\r\n          ) : (\r\n            posts.map((post) => <Post key={post._id} images={post.images} {...post} />)\r\n          )}\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n","import { IMessage, MessagesState } from './state';\r\nimport { Action } from 'redux';\r\n\r\nexport enum MessageActionsType {\r\n  SET_MESSAGES = 'dialogs/messages/SET_MESSAGES',\r\n  FETCH_MESSAGES = 'dialogs/messages/FETCH_MESSAGES',\r\n  FETCH_ADD_MESSAGE = 'dialogs/message/FETCH_ADD_MESSAGE',\r\n  ADD_MESSAGE = 'dialogs/message/ADD_MESSAGE',\r\n  UPDATE_MESSAGE_READ_STATUS = 'dialogs/message/UPDATE_MESSAGE_READ_STATUS',\r\n}\r\n\r\nexport interface SetMessagesActionInterface extends Action<MessageActionsType> {\r\n  type: MessageActionsType.SET_MESSAGES;\r\n  payload: MessagesState['messages'];\r\n}\r\n\r\nexport interface FetchMessagesActionInterface extends Action<MessageActionsType> {\r\n  type: MessageActionsType.FETCH_MESSAGES;\r\n  payload: string;\r\n}\r\n\r\nexport interface AddMessageActionInterface extends Action<MessageActionsType> {\r\n  type: MessageActionsType.ADD_MESSAGE;\r\n  payload: IMessage;\r\n}\r\n\r\nexport interface FetchAddMessage extends Action<MessageActionsType> {\r\n  type: MessageActionsType.FETCH_ADD_MESSAGE;\r\n  payload: { text: string; dialogId: string };\r\n}\r\n\r\nexport interface UpdateReadedStatusActionInterface extends Action<MessageActionsType> {\r\n  type: MessageActionsType.UPDATE_MESSAGE_READ_STATUS;\r\n  payload: string;\r\n}\r\n\r\nexport type MessagesActions =\r\n  | SetMessagesActionInterface\r\n  | FetchMessagesActionInterface\r\n  | AddMessageActionInterface\r\n  | FetchAddMessage\r\n  | UpdateReadedStatusActionInterface;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { verifyEmailUser } from '../store/user/actionCreators';\r\nimport { selectConfirmStatus } from '../store/user/selectors';\r\n\r\nexport const VerifyEmailUserPage = () => {\r\n  const dispatch = useDispatch();\r\n  const isConfirmed = useSelector(selectConfirmStatus);\r\n  const history = useHistory();\r\n  React.useEffect(() => {\r\n    const hash = window.location.pathname.split('/').pop();\r\n    if (hash) {\r\n      dispatch(verifyEmailUser(hash));\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => history.push('/'), 3000);\r\n  }, [isConfirmed]);\r\n\r\n  if (isConfirmed) {\r\n    return (\r\n      <div>\r\n        Your mail has been verified, thank you! You will now be redirected to the login page\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>Error verified</div>;\r\n};\r\n","import io from 'socket.io-client';\r\n\r\nconst socket = io(window.location.origin.replace('3000', '8888'));\r\n\r\nexport default socket;\r\n","import {\r\n  SetMessagesActionInterface,\r\n  MessageActionsType,\r\n  FetchMessagesActionInterface,\r\n  AddMessageActionInterface,\r\n  FetchAddMessage,\r\n  UpdateReadedStatusActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { IMessage, MessagesState } from './contracts/state';\r\n\r\nexport const setMessages = (payload: MessagesState['messages']): SetMessagesActionInterface => ({\r\n  type: MessageActionsType.SET_MESSAGES,\r\n  payload,\r\n});\r\n\r\nexport const fetchMessages = (payload: string): FetchMessagesActionInterface => ({\r\n  type: MessageActionsType.FETCH_MESSAGES,\r\n  payload,\r\n});\r\n\r\nexport const addMessage = (payload: IMessage): AddMessageActionInterface => ({\r\n  type: MessageActionsType.ADD_MESSAGE,\r\n  payload,\r\n});\r\n\r\nexport const fetchAddMessage = (payload: { text: string; dialogId: string }): FetchAddMessage => ({\r\n  type: MessageActionsType.FETCH_ADD_MESSAGE,\r\n  payload,\r\n});\r\n\r\nexport const updateReadedStatus = (payload: string): UpdateReadedStatusActionInterface => ({\r\n  type: MessageActionsType.UPDATE_MESSAGE_READ_STATUS,\r\n  payload,\r\n});\r\n","import React from 'react';\r\nimport format from 'date-fns/format';\r\nimport ruLang from 'date-fns/locale/ru';\r\nimport { User } from '../../../store/user/contracts/state';\r\n\r\nimport PlaceHolderImg from '../../../assets/images/user/user-placeholder.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { IMessage } from '../../../store/messages/contracts/state';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchMessages } from '../../../store/messages/actionCreators';\r\nimport { isToday } from 'date-fns';\r\nimport socket from '../../../core/socket';\r\nimport { setCurrentDialog, updateDialogNewMessages } from '../../../store/dialogs/actionCreators';\r\ninterface IChatUser {\r\n  _id: string;\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar' | 'isOnline'>;\r\n  activeDialog: string;\r\n  createdAt: string;\r\n  lastMessage: IMessage;\r\n  newMessages?: {\r\n    count: number;\r\n  };\r\n  isCountNewMessages: boolean;\r\n}\r\n\r\nexport const ChatUser = ({\r\n  _id,\r\n  user,\r\n  activeDialog,\r\n  lastMessage,\r\n  newMessages,\r\n  isCountNewMessages,\r\n}: IChatUser): React.ReactElement => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleActiveDialog = () => {\r\n    const dialog = {\r\n      _id,\r\n      user,\r\n    };\r\n\r\n    if (activeDialog !== _id) {\r\n      socket.emit('DIALOGS:JOIN', dialog._id);\r\n\r\n      dispatch(\r\n        setCurrentDialog({\r\n          id: _id,\r\n          user,\r\n        }),\r\n      );\r\n\r\n      dispatch(fetchMessages(_id));\r\n      dispatch(updateDialogNewMessages(dialog._id));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Link\r\n      to={`/chat/dialog/${_id}`}\r\n      className={`chat__user ${activeDialog ? 'chat__user--active' : ''}`}\r\n      onClick={handleActiveDialog}>\r\n      <div className=\"chat__user-inner\">\r\n        <div className=\"chat__user-info\">\r\n          <div className=\"chat__user-avatar\">\r\n            <img src={user.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n            <span\r\n              className={`chat__status ${\r\n                user.isOnline ? 'chat__status--online' : 'chat__status--offline'\r\n              }`}></span>\r\n          </div>\r\n          <div className=\"chat__user-info__data\">\r\n            <div className=\"chat__user-info__fullname\">\r\n              <h6>{user.fullname}</h6>\r\n            </div>\r\n            {lastMessage.text ? (\r\n              <p className=\"chat__user-info__message\">{lastMessage?.text}</p>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className=\"chat__user-meta\">\r\n          <div className=\"chat__user-meta__time\">\r\n            {format(\r\n              new Date(lastMessage.createdAt),\r\n              `${isToday(new Date(lastMessage.createdAt)) ? 'p' : 'dd MMM'}`,\r\n              {\r\n                locale: ruLang,\r\n              },\r\n            )}\r\n          </div>\r\n\r\n          {newMessages?.count !== 0 && isCountNewMessages && (\r\n            <div className=\"chat__user-meta__count\">{newMessages?.count}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectCurrentDialog,\r\n  selectDialogs,\r\n  selectIsDialogsLoaded,\r\n} from '../../../store/dialogs/selectors';\r\nimport { selectMeId } from '../../../store/user/selectors';\r\nimport { ChatUser } from './ChatUser';\r\n\r\nexport const ChatDialogs = React.memo(() => {\r\n  const isLoadingDialogs = useSelector(selectIsDialogsLoaded);\r\n  const dialogs = useSelector(selectDialogs);\r\n  const meId = useSelector(selectMeId);\r\n  const currentDialog = useSelector(selectCurrentDialog);\r\n\r\n  return (\r\n    <div className=\"chat__contacts chat__scroller\">\r\n      {isLoadingDialogs\r\n        ? dialogs.map((dialog) => (\r\n            <ChatUser\r\n              user={meId === dialog.partner._id ? dialog.author : dialog.partner}\r\n              isCountNewMessages={meId === dialog.newMessages.user._id ? false : true}\r\n              key={dialog._id}\r\n              {...dialog}\r\n              activeDialog={currentDialog.id === dialog._id ? currentDialog.id : ''}\r\n            />\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n});\r\n","import { MessagesState } from './contracts/state';\r\n\r\nimport { LoadingStatus } from '../types';\r\n\r\nimport { RootState } from '../store';\r\n\r\nexport const selectMessagesState = (state: RootState): MessagesState => state.messages;\r\n\r\nexport const selectLoadingStatus = (state: RootState): LoadingStatus =>\r\n  selectMessagesState(state).LoadingStatus;\r\n\r\nexport const selectMessages = (state: RootState) => selectMessagesState(state).messages;\r\n\r\nexport const selectIsMessagesLoaded = (state: RootState): boolean =>\r\n  selectLoadingStatus(state) === LoadingStatus.LOADED ||\r\n  selectLoadingStatus(state) === LoadingStatus.NEVER;\r\n","import React from 'react';\r\nimport { User } from '../../../store/user/contracts/state';\r\nimport PlaceHolderImg from '../../../assets/images/user/user-placeholder.png';\r\ninterface IChatDialogProfile {\r\n  user: Pick<User, '_id' | 'fullname' | 'avatar' | 'isOnline'> | null;\r\n}\r\n\r\nexport const ChatDialogProfile = ({ user }: IChatDialogProfile) => {\r\n  return (\r\n    <div className=\"chat__messages-profile\">\r\n      <div className=\"chat__messages-profile__avatar\">\r\n        <img src={user?.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n        <span\r\n          className={`chat__status ${\r\n            user?.isOnline ? 'chat__status--online' : 'chat__status--offline'\r\n          }`}></span>\r\n      </div>\r\n      <div className=\"chat__messages-profile__fullname\">{user?.fullname}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { IoCheckmarkDoneOutline } from 'react-icons/io5';\r\nimport PlaceHolderImg from '../../../assets/images/user/user-placeholder.png';\r\nimport format from 'date-fns/format';\r\nimport ruLang from 'date-fns/locale/ru';\r\nimport { User } from '../../../store/user/contracts/state';\r\nimport { isToday } from 'date-fns';\r\ninterface IChatMessage {\r\n  message?: string;\r\n  me: boolean;\r\n  read: boolean;\r\n  createdAt: string;\r\n  partner: Pick<User, '_id' | 'fullname' | 'avatar'>;\r\n}\r\n\r\nexport const ChatMessage = ({ message, me, read, partner, createdAt }: IChatMessage) => {\r\n  return (\r\n    <div className={`chat__message ${me ? '' : 'chat__message-left'}`}>\r\n      <div className=\"chat__message-bubble\">\r\n        <p className=\"chat__message-text\">{message}</p>\r\n        <span className={`chat__message-status ${read ? 'chat__message-status--read' : ' '}`}>\r\n          <IoCheckmarkDoneOutline />\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"chat__message-info\">\r\n        <div className=\"chat__message-user\">\r\n          <img src={partner.avatar ? partner.avatar : PlaceHolderImg} alt=\"\" />\r\n        </div>\r\n        <span className=\"chat__message-sended-time\">\r\n          {format(new Date(createdAt), `${isToday(new Date(createdAt)) ? 'p' : 'dd MMM p'}`, {\r\n            locale: ruLang,\r\n          })}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { User } from '../../../store/user/contracts/state';\r\nimport PlaceHolderImg from '../../../assets/images/user/user-placeholder.png';\r\nexport const ChatMessageTyping: React.FC<{\r\n  user: Pick<User, 'avatar'> | null;\r\n}> = ({ user }) => {\r\n  return (\r\n    <div className=\"chat__message chat__message-left\">\r\n      <div className=\"chat__message-bubble\">\r\n        <div className=\"chat__message-typing\">\r\n          <span className=\"chat__message-typing-circle\"></span>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__message-info\">\r\n        <div className=\"chat__message-user\">\r\n          <img src={user?.avatar ? user.avatar : PlaceHolderImg} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ImAttachment } from 'react-icons/im';\r\nimport { GrEmoji } from 'react-icons/gr';\r\nimport { FaTelegramPlane } from 'react-icons/fa';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchAddMessage } from '../../../store/messages/actionCreators';\r\nimport socket from '../../../core/socket';\r\n\r\ninterface IChatSendMessage {\r\n  dialogId: string;\r\n  userId: string | null;\r\n}\r\n\r\nexport const ChatSendMessage = ({ dialogId, userId }: IChatSendMessage) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [message, setMessage] = React.useState<string>('');\r\n\r\n  const handleChangeMessage = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    socket.emit('DIALOGS:TYPING', { dialogId, userId });\r\n\r\n    if (message !== '' && e.key === 'Enter') {\r\n      dispatch(fetchAddMessage({ text: message, dialogId }));\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const handleClickAddMessage = () => {\r\n    if (message !== '') {\r\n      dispatch(fetchAddMessage({ text: message, dialogId }));\r\n\r\n      setMessage('');\r\n    } else {\r\n      alert('Введите сообщение!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat__messages-add\">\r\n      <div className=\"chat__messages-add__attagement\">\r\n        <GrEmoji />\r\n        <ImAttachment />\r\n      </div>\r\n      <div className=\"chat__messages-add__input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          onKeyUp={handleChangeMessage}\r\n        />\r\n      </div>\r\n\r\n      <button className=\"chat__messages-add__send\" onClick={handleClickAddMessage}>\r\n        <FaTelegramPlane />\r\n\r\n        <span>Send</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { BsChatSquareDots } from 'react-icons/bs';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport socket from '../../../core/socket';\r\nimport { fetchDialogs } from '../../../store/dialogs/actionCreators';\r\nimport { selectCurrentDialog } from '../../../store/dialogs/selectors';\r\nimport { addMessage, updateReadedStatus } from '../../../store/messages/actionCreators';\r\nimport { IMessage } from '../../../store/messages/contracts/state';\r\nimport { selectIsMessagesLoaded, selectMessages } from '../../../store/messages/selectors';\r\nimport { User } from '../../../store/user/contracts/state';\r\nimport { selectMeId } from '../../../store/user/selectors';\r\nimport { Loader } from '../../ui/Loader';\r\nimport { ChatDialogProfile } from './ChatDialogProfile';\r\nimport { ChatMessage } from './ChatMessage';\r\nimport { ChatMessageTyping } from './ChatMessageTyping';\r\nimport { ChatSendMessage } from './ChatSendMessage';\r\n\r\nexport const ChatMessages = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoadingMessages = useSelector(selectIsMessagesLoaded);\r\n  const messages = useSelector(selectMessages);\r\n  const meId = useSelector(selectMeId);\r\n  const currentDialog = useSelector(selectCurrentDialog);\r\n\r\n  const scrollMessages = React.useRef<null | HTMLDivElement>(null);\r\n\r\n  const [typingUser, setTypingUser] = React.useState<Pick<User, 'avatar'> | null>(null);\r\n\r\n  let typingTimeoutId: any = null;\r\n\r\n  const onNewMessage = (message: IMessage) => {\r\n    if (message.dialog?._id === currentDialog.id) {\r\n      dispatch(addMessage(message));\r\n\r\n      socket.emit('CLIENT:MESSAGES_READED', currentDialog.id);\r\n\r\n      if (meId !== message.user._id) {\r\n        dispatch(updateReadedStatus(currentDialog.id));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFetchDialogs = () => {\r\n    dispatch(fetchDialogs());\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    socket.on(\r\n      'DIALOGS:TYPING',\r\n      (dataTyping: { dialog: string; user: Pick<User, 'avatar'> | null }) => {\r\n        if (dataTyping.dialog === currentDialog.id) {\r\n          setTypingUser(dataTyping.user);\r\n          clearInterval(typingTimeoutId);\r\n          typingTimeoutId = setTimeout(() => {\r\n            setTypingUser(null);\r\n          }, 3000);\r\n        }\r\n      },\r\n    );\r\n\r\n    return () => {\r\n      setTypingUser(null);\r\n      socket.off('DIALOGS:TYPING');\r\n    };\r\n  }, [currentDialog]);\r\n\r\n  React.useEffect(() => {\r\n    socket.on('SERVER:NEW_MESSAGE', onNewMessage);\r\n\r\n    return () => {\r\n      socket.off('SERVER:NEW_MESSAGE', onNewMessage);\r\n    };\r\n  }, [meId, currentDialog]);\r\n\r\n  React.useEffect(() => {\r\n    socket.on('SERVER:DIALOG_CREATED', onFetchDialogs);\r\n    socket.on('SERVER:NEW_MESSAGE', onFetchDialogs);\r\n    socket.on('SERVER:MESSAGES_READED', (dialogId) => {\r\n      if (dialogId === currentDialog.id) {\r\n        socket.emit('CLIENT:DIALOG_IS_OPEN', {\r\n          dialogId: currentDialog.id,\r\n          user: currentDialog.user,\r\n        });\r\n      }\r\n\r\n      dispatch(updateReadedStatus(dialogId));\r\n    });\r\n    return () => {\r\n      socket.off('SERVER:DIALOG_CREATED', onFetchDialogs);\r\n      socket.off('SERVER:NEW_MESSAGE', onFetchDialogs);\r\n      socket.off('SERVER:MESSAGES_READED');\r\n    };\r\n  }, [currentDialog]);\r\n\r\n  React.useEffect(() => {\r\n    if (scrollMessages.current && isLoadingMessages && messages.length !== 0) {\r\n      scrollMessages.current.scrollTo(0, 999999);\r\n    }\r\n  }, [isLoadingMessages, messages, typingUser]);\r\n\r\n  return (\r\n    <div\r\n      className={`chat__messages  ${\r\n        !isLoadingMessages || messages.length === 0 ? 'chat__messages--none' : ' '\r\n      }`}>\r\n      {isLoadingMessages ? (\r\n        isLoadingMessages && messages.length === 0 ? (\r\n          <div className=\"chat__messages-start\">\r\n            <div className=\"chat__messages-start__icon\">\r\n              <BsChatSquareDots />\r\n            </div>\r\n            <span className=\"chat__messages-start__title\">Start Conversation!</span>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <ChatDialogProfile user={currentDialog.user} />\r\n            <div className=\"chat__messages-content chat__scroller\" ref={scrollMessages}>\r\n              {messages.map((message) => {\r\n                if (message.text) {\r\n                  return (\r\n                    <ChatMessage\r\n                      key={message._id}\r\n                      partner={message.user}\r\n                      message={message.text}\r\n                      me={meId === message.user._id ? true : false}\r\n                      {...message}\r\n                    />\r\n                  );\r\n                }\r\n              })}\r\n              {typingUser && <ChatMessageTyping user={typingUser} />}\r\n            </div>\r\n            <ChatSendMessage dialogId={currentDialog.id} userId={meId} />\r\n          </>\r\n        )\r\n      ) : (\r\n        <Loader cls={'loader__full'} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Layout } from '../Layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getDialog,\r\n  setCurrentDialog,\r\n  updateDialogNewMessages,\r\n} from '../../store/dialogs/actionCreators';\r\nimport socket from '../../core/socket';\r\nimport { ChatDialogs } from '../../components/chat/chatDialogs/ChatDialogs';\r\nimport { ChatMessages } from '../../components/chat/chatMessages/СhatMessages';\r\nimport { fetchMessages } from '../../store/messages/actionCreators';\r\nimport { selectCurrentDialog } from '../../store/dialogs/selectors';\r\n\r\nexport const Chat = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const currentDialog = useSelector(selectCurrentDialog);\r\n\r\n  React.useEffect(() => {\r\n    const { pathname } = window.location;\r\n    const dialogId = pathname.includes('/dialog') ? pathname.split('/').pop() : null;\r\n    if (dialogId) {\r\n      dispatch(getDialog(dialogId));\r\n\r\n      socket.emit('DIALOGS:JOIN', dialogId);\r\n      dispatch(fetchMessages(dialogId));\r\n      dispatch(updateDialogNewMessages(currentDialog.id));\r\n    }\r\n  }, [window.location.pathname]);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"chat\">\r\n        <ChatDialogs />\r\n        <ChatMessages />\r\n      </div>\r\n    </Layout>\r\n  );\r\n});\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport { FullPost } from './pages/FullPost/FullPost';\nimport { Home } from './pages/Home/Home';\nimport { PageNotFound } from './pages/PageNotFound';\nimport { SignIn } from './pages/SignIn/SignIn';\nimport { SignUp } from './pages/SignUp/SignUp';\nimport { UserProfile } from './pages/UserProfile/UserPage';\nimport { VerifyEmailUserPage } from './pages/VerifyEmailUserPage';\nimport { Chat } from './pages/Сhat/Chat';\nimport { fetchUserData } from './store/user/actionCreators';\n\nfunction App(): React.ReactElement {\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(fetchUserData());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/signin\" component={SignIn} exact />\n        <Route path=\"/signup\" component={SignUp} exact />\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/chat\" component={Chat} />\n        <Route path=\"/user/:id\" component={UserProfile} exact />\n        <Route path=\"/post/:id\" component={FullPost} exact />\n        <Route path=\"/user/activate/:hash\" component={VerifyEmailUserPage} exact />\n        <Route path=\"*\" component={PageNotFound} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import produce, { Draft } from 'immer';\r\nimport { IPost } from '../posts/contracts/state';\r\n\r\nimport { PostActions, PostActionsType } from './contracts/actionTypes';\r\nimport { PostState } from './contracts/state';\r\n\r\nconst initialPostsState: PostState = {\r\n  post: {} as IPost,\r\n};\r\n\r\nexport const postReducer = produce((draft: Draft<PostState>, action: PostActions) => {\r\n  switch (action.type) {\r\n    case PostActionsType.SET_POST:\r\n      draft.post = action.payload;\r\n      break;\r\n\r\n    case PostActionsType.TOGGLE_LIKE_POST:\r\n      const findLike = draft.post.likes?.some((like) => like._id === action.payload.user._id);\r\n      if (findLike) {\r\n        draft.post.likes = draft.post.likes?.filter(\r\n          (deleteUserLike) => deleteUserLike._id !== action.payload.user._id,\r\n        );\r\n      } else {\r\n        draft.post.likes?.push(action.payload.user);\r\n      }\r\n      break;\r\n    case PostActionsType.ADD_COMMENT_TO_POST:\r\n      draft.post.comments?.splice(0, 0, action.payload);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n}, initialPostsState);\r\n","import { UserActions } from './contracts/actionTypes';\r\n\r\nimport { LoadingStatus } from './../types';\r\nimport produce, { Draft } from 'immer';\r\n\r\nimport { UserActionsType } from './contracts/actionTypes';\r\nimport { UserState } from './contracts/state';\r\n\r\nconst initialUserState: UserState = {\r\n  data: undefined,\r\n  status: LoadingStatus.NEVER,\r\n  userId: null,\r\n  isConfirmed: false,\r\n};\r\n\r\nexport const userReducer = produce((draft: Draft<UserState>, action: UserActions) => {\r\n  switch (action.type) {\r\n    case UserActionsType.SET_USER_DATA:\r\n      draft.data = action.payload;\r\n      draft.status = LoadingStatus.SUCCESS;\r\n      break;\r\n\r\n    case UserActionsType.SET_LOADING_STATE:\r\n      draft.status = action.payload;\r\n      break;\r\n\r\n    case UserActionsType.SIGN_OUT:\r\n      draft.status = LoadingStatus.LOADED;\r\n      draft.data = undefined;\r\n      break;\r\n\r\n    case UserActionsType.VERIFY_EMAIL_STATUS:\r\n      draft.isConfirmed = action.payload;\r\n      break;\r\n    case UserActionsType.SET_ME_ID:\r\n      draft.userId = action.payload;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}, initialUserState);\r\n","import produce, { Draft } from 'immer';\r\nimport { LoadingStatus } from './../types';\r\nimport { PostsActions, PostsActionsType } from './contracts/actionTypes';\r\nimport { PostsState, CreatePostState } from './contracts/state';\r\nconst initialPostsState: PostsState = {\r\n  posts: [],\r\n  addFormState: CreatePostState.NEVER,\r\n  LoadingStatus: LoadingStatus.NEVER,\r\n  postLikeState: LoadingStatus.NEVER,\r\n};\r\n\r\nexport const postsReducer = produce((draft: Draft<PostsState>, action: PostsActions) => {\r\n  switch (action.type) {\r\n    case PostsActionsType.SET_POSTS:\r\n      draft.posts = action.payload;\r\n      draft.LoadingStatus = LoadingStatus.LOADED;\r\n      break;\r\n\r\n    case PostsActionsType.FETCH_POSTS:\r\n      draft.posts = [];\r\n      draft.LoadingStatus = LoadingStatus.LOADING;\r\n      break;\r\n\r\n    case PostsActionsType.SET_LOADING_STATE:\r\n      draft.LoadingStatus = action.payload;\r\n      break;\r\n\r\n    case PostsActionsType.SET_ADD_FORM_STATE:\r\n      draft.addFormState = action.payload;\r\n      break;\r\n\r\n    case PostsActionsType.FETCH_ADD_POST:\r\n      draft.addFormState = CreatePostState.LOADING;\r\n      break;\r\n\r\n    case PostsActionsType.ADD_POST:\r\n      draft.posts.splice(0, 0, action.payload);\r\n      draft.addFormState = CreatePostState.NEVER;\r\n      break;\r\n\r\n    case PostsActionsType.REMOVE_POST:\r\n      draft.posts = draft.posts.filter((obj) => obj._id !== action.payload);\r\n      break;\r\n\r\n    case PostsActionsType.UPDATE_POST:\r\n      draft.posts.forEach((obj) => {\r\n        if (obj._id === action.payload.id) {\r\n          obj.text = action.payload.text;\r\n        }\r\n      });\r\n      break;\r\n    case PostsActionsType.TOGGLE_LIKE_POST:\r\n      const postIndex = draft.posts.findIndex((post) => post._id === action.payload.id);\r\n      const findLike = draft.posts[postIndex].likes?.some(\r\n        (like) => like._id === action.payload.user._id,\r\n      );\r\n\r\n      if (findLike) {\r\n        draft.posts[postIndex].likes = draft.posts[postIndex].likes?.filter(\r\n          (deleteUserLike) => deleteUserLike._id !== action.payload.user._id,\r\n        );\r\n      } else {\r\n        draft.posts[postIndex].likes?.push(action.payload.user);\r\n      }\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n}, initialPostsState);\r\n","import { DialogsActions, DialogsActionsType } from './contracts/actionTypes';\r\nimport { DialogsState } from './contracts/state';\r\nimport produce, { Draft } from 'immer';\r\nimport { LoadingStatus } from '../types';\r\n\r\nconst initialPostsState: DialogsState = {\r\n  dialogs: [],\r\n  LoadingStatus: LoadingStatus.NEVER,\r\n  currentDialog: {\r\n    id: '',\r\n    user: null,\r\n  },\r\n};\r\n\r\nexport const dialogsReducer = produce((draft: Draft<DialogsState>, action: DialogsActions) => {\r\n  switch (action.type) {\r\n    case DialogsActionsType.SET_DIALOGS:\r\n      draft.dialogs = action.payload;\r\n      draft.LoadingStatus = LoadingStatus.LOADED;\r\n      break;\r\n\r\n    case DialogsActionsType.FETCH_DIALOGS:\r\n      draft.LoadingStatus = LoadingStatus.LOADING;\r\n      break;\r\n\r\n    case DialogsActionsType.SET_CURRENT_DIALOG:\r\n      draft.currentDialog = {\r\n        id: action.payload.id,\r\n        user: action.payload.user,\r\n      };\r\n      break;\r\n\r\n    case DialogsActionsType.UPDATE_DIALOG_NEW_MESSAGE:\r\n      draft.dialogs = draft.dialogs.map((dialog) => {\r\n        if (dialog._id === action.payload) {\r\n          dialog.newMessages.count = 0;\r\n        }\r\n\r\n        return dialog;\r\n      });\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n}, initialPostsState);\r\n","import { MessageActionsType, MessagesActions } from './contracts/actionTypes';\r\nimport { MessagesState } from './contracts/state';\r\nimport produce, { Draft } from 'immer';\r\nimport { LoadingStatus } from '../types';\r\n\r\nconst initialPostsState: MessagesState = {\r\n  messages: [],\r\n  LoadingStatus: LoadingStatus.NEVER,\r\n};\r\n\r\nexport const messagesReducer = produce((draft: Draft<MessagesState>, action: MessagesActions) => {\r\n  switch (action.type) {\r\n    case MessageActionsType.SET_MESSAGES:\r\n      draft.messages = action.payload;\r\n      draft.LoadingStatus = LoadingStatus.LOADED;\r\n      break;\r\n\r\n    case MessageActionsType.FETCH_MESSAGES:\r\n      draft.LoadingStatus = LoadingStatus.LOADING;\r\n      break;\r\n\r\n    case MessageActionsType.ADD_MESSAGE:\r\n      draft.messages.push(action.payload);\r\n\r\n      break;\r\n\r\n    case MessageActionsType.UPDATE_MESSAGE_READ_STATUS:\r\n      draft.messages = draft.messages.map((message) => {\r\n        if (message.dialog?._id === action.payload) {\r\n          message.read = true;\r\n        }\r\n        return message;\r\n      });\r\n\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n}, initialPostsState);\r\n","import { postReducer } from './post/reducer';\r\nimport { userReducer } from './user/reducer';\r\nimport { combineReducers } from 'redux';\r\nimport { postsReducer } from './posts/reducer';\r\nimport { dialogsReducer } from './dialogs/reducer';\r\nimport { messagesReducer } from './messages/reducer';\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  post: postReducer,\r\n  user: userReducer,\r\n  dialogs: dialogsReducer,\r\n  messages: messagesReducer,\r\n});\r\n","import { IDialog } from './../store/dialogs/contracts/state';\r\n\r\nimport axios from 'axios';\r\nimport { IMessage } from '../store/messages/contracts/state';\r\n\r\ninterface Response<T> {\r\n  status: string;\r\n  data: T;\r\n}\r\n\r\nexport const ChatApi = {\r\n  async fetchDialogs(): Promise<IDialog[]> {\r\n    const { data } = await axios.get<Response<IDialog[]>>('/dialogs');\r\n    return data.data;\r\n  },\r\n  async getDialog(dialogId: string): Promise<IDialog> {\r\n    const { data } = await axios.get<Response<IDialog>>(`/dialogs/${dialogId}`);\r\n    return data.data;\r\n  },\r\n  async createDialog(partnerId: string): Promise<void> {\r\n    await axios.post<Response<IDialog>>('/dialogs', { partner: partnerId });\r\n  },\r\n\r\n  async fetchMessages(dialogId?: string): Promise<IMessage[]> {\r\n    const { data } = await axios.get<Response<IMessage[]>>(`/messages?dialog=${dialogId}`);\r\n    return data.data;\r\n  },\r\n  async addMessage(payload: { text: string; dialogId: string }): Promise<void> {\r\n    await axios.post<Response<IDialog>>('/messages', {\r\n      text: payload.text,\r\n      dialog_id: payload.dialogId,\r\n    });\r\n  },\r\n};\r\n","import { DialogsState, IDialog } from './contracts/state';\r\nimport { setDialogs, setCurrentDialog, updateDialogNewMessages } from './actionCreators';\r\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  DialogsActionsType,\r\n  CreateDialogActionInterface,\r\n  GetDialogActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { ChatApi } from '../../api/ChatApi';\r\nimport { selectMeId } from '../user/selectors';\r\nimport { selectCurrentDialog } from './selectors';\r\n\r\nexport function* fetchDialogsRequest() {\r\n  try {\r\n    const currentDialog: DialogsState['currentDialog'] = yield select(selectCurrentDialog);\r\n    const items: IDialog[] = yield call(ChatApi.fetchDialogs);\r\n\r\n    yield put(setDialogs(items));\r\n\r\n    const isCurrentDialog: boolean = items.some(\r\n      (item) => item.lastMessage.dialog?._id === currentDialog.id,\r\n    );\r\n\r\n    if (isCurrentDialog) {\r\n      yield put(updateDialogNewMessages(currentDialog.id));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchCreateDialogRequest({ payload }: CreateDialogActionInterface) {\r\n  try {\r\n    yield call(ChatApi.createDialog, payload);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchGetDialogRequest({ payload }: GetDialogActionInterface) {\r\n  try {\r\n    const meId: string = yield select(selectMeId);\r\n    const dialog: IDialog = yield call(ChatApi.getDialog, payload);\r\n\r\n    yield put(\r\n      setCurrentDialog({\r\n        id: payload,\r\n        user: meId === dialog.author._id ? dialog.partner : dialog.author,\r\n      }),\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* dialogsSaga() {\r\n  yield takeLatest(DialogsActionsType.FETCH_DIALOGS, fetchDialogsRequest);\r\n  yield takeLatest(DialogsActionsType.CREATE_DIALOG, fetchCreateDialogRequest);\r\n  yield takeLatest(DialogsActionsType.GET_DIALOG, fetchGetDialogRequest);\r\n}\r\n","import { setMessages } from './actionCreators';\r\n\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ChatApi } from '../../api/ChatApi';\r\nimport { IMessage } from './contracts/state';\r\nimport {\r\n  MessageActionsType,\r\n  FetchAddMessage,\r\n  FetchMessagesActionInterface,\r\n} from './contracts/actionTypes';\r\n\r\nexport function* fetchMessagesRequest({ payload }: FetchMessagesActionInterface) {\r\n  try {\r\n    const items: IMessage[] = yield call(ChatApi.fetchMessages, payload);\r\n\r\n    yield put(setMessages(items));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchAddMessageRequest({ payload }: FetchAddMessage) {\r\n  try {\r\n    yield call(ChatApi.addMessage, payload);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* messagesSaga() {\r\n  yield takeLatest(MessageActionsType.FETCH_MESSAGES, fetchMessagesRequest);\r\n  yield takeLatest(MessageActionsType.FETCH_ADD_MESSAGE, fetchAddMessageRequest);\r\n}\r\n","import { IPost } from './../store/posts/contracts/state';\r\nimport axios from 'axios';\r\n\r\ninterface Response<T> {\r\n  status: string;\r\n  data: T;\r\n}\r\n\r\nexport const PostsApi = {\r\n  async fetchPosts(userId?: string): Promise<IPost[]> {\r\n    const { data } = await axios.get<Response<IPost[]>>(\r\n      userId ? `/posts/user/${userId}` : '/posts',\r\n    );\r\n    return data.data;\r\n  },\r\n\r\n  async fetchPostData(id?: string): Promise<IPost> {\r\n    const { data } = await axios.get<Response<IPost>>('/posts/' + id);\r\n\r\n    return data.data;\r\n  },\r\n  async addPost(payload: { text: string }): Promise<IPost> {\r\n    const { data } = await axios.post<Response<IPost>>('/posts', payload);\r\n    return data.data;\r\n  },\r\n\r\n  async addCommentToPost(payload: { id?: string; text: string }) {\r\n    await axios.post<Response<IPost>>(`/posts/comment/${payload.id}`, {\r\n      text: payload.text,\r\n    });\r\n  },\r\n\r\n  async updatePost(payload: { id: string; text: string }): Promise<void> {\r\n    await axios.patch('/posts/' + payload.id, { text: payload.text });\r\n  },\r\n\r\n  async removePost(id: string): Promise<void> {\r\n    await axios.delete('/posts/' + id);\r\n  },\r\n\r\n  async toggleLikePost(id: string): Promise<void> {\r\n    await axios.patch('/posts/likes/' + id);\r\n  },\r\n};\r\n","import { PostsApi } from '../../api/PostApi';\r\nimport { call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { IPost } from '../posts/contracts/state';\r\nimport { setPost, toggleLikePost, fetchAddCommentToPost, addCommentToPost } from './actionCreators';\r\nimport {\r\n  FetchCommentToPostActionInterface,\r\n  FetchToggleLikePostActionInterface,\r\n  PostActionsType,\r\n} from './contracts/actionTypes';\r\nimport { selectUserData } from '../user/selectors';\r\nimport { User } from '../user/contracts/state';\r\n\r\nexport function* fetchPostRequest() {\r\n  try {\r\n    const pathname = window.location.pathname;\r\n    const postId = pathname.includes('/post') ? pathname.split('/').pop() : undefined;\r\n\r\n    const post: IPost = yield call(PostsApi.fetchPostData, postId);\r\n    yield put(setPost(post));\r\n  } catch (error) {\r\n    console.log('error');\r\n  }\r\n}\r\n\r\nexport function* fetchToggleLikePostRequest({ payload }: FetchToggleLikePostActionInterface) {\r\n  try {\r\n    const userLike: Pick<User, '_id' | 'fullname' | 'avatar'> = yield select(selectUserData);\r\n\r\n    yield put(\r\n      toggleLikePost({\r\n        user: {\r\n          _id: userLike._id,\r\n          fullname: userLike.fullname,\r\n          avatar: userLike.avatar,\r\n        },\r\n      }),\r\n    );\r\n\r\n    console.log(payload);\r\n\r\n    yield call(PostsApi.toggleLikePost, payload);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchAddCommentToPostRequest({ payload }: FetchCommentToPostActionInterface) {\r\n  try {\r\n    const pathname = window.location.pathname;\r\n    const postId = pathname.includes('/post') ? pathname.split('/').pop() : undefined;\r\n\r\n    const userComment: Pick<User, '_id' | 'fullname' | 'avatar'> = yield select(selectUserData);\r\n\r\n    yield call(PostsApi.addCommentToPost, { id: postId, text: payload });\r\n    yield put(\r\n      addCommentToPost({\r\n        user: userComment,\r\n        text: payload,\r\n      }),\r\n    );\r\n  } catch (error) {\r\n    console.log('error');\r\n  }\r\n}\r\n\r\nexport function* postSaga() {\r\n  yield takeLatest(PostActionsType.FETCH_POST, fetchPostRequest);\r\n  yield takeLatest(PostActionsType.FETCH_TOGGLE_LIKE_POST, fetchToggleLikePostRequest);\r\n  yield takeLatest(PostActionsType.FETCH_ADD_COMMENT_TO_POST, fetchAddCommentToPostRequest);\r\n}\r\n","import { User } from './../user/contracts/state';\r\nimport { selectUserData } from './../user/selectors';\r\nimport { LoadingStatus } from './../types';\r\nimport {\r\n  setPosts,\r\n  setPostsLoadingStatus,\r\n  addPost,\r\n  setAddFormState,\r\n  toggleLikePost,\r\n} from './actionCreators';\r\nimport { PostsApi } from './../../api/PostApi';\r\nimport { IPost, CreatePostState } from './contracts/state';\r\nimport {\r\n  FetchAddPostActionInterface,\r\n  PostsActionsType,\r\n  RemovePostActionInterface,\r\n  FetchToggleLikePostActionInterface,\r\n  UpdatePostActionInterface,\r\n} from './contracts/actionTypes';\r\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\r\n\r\nexport function* fetchPostsRequest() {\r\n  try {\r\n    const pathname = window.location.pathname;\r\n    const userId = pathname.includes('/user') ? pathname.split('/').pop() : undefined;\r\n    const items: IPost[] = yield call(PostsApi.fetchPosts, userId);\r\n    yield put(setPosts(items));\r\n  } catch (error) {\r\n    yield put(setPostsLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* fetchAddPostRequest({ payload }: FetchAddPostActionInterface) {\r\n  try {\r\n    const item: IPost = yield call(PostsApi.addPost, payload);\r\n    yield put(addPost(item));\r\n  } catch (error) {\r\n    yield put(setAddFormState(CreatePostState.ERROR));\r\n  }\r\n}\r\n\r\nexport function* fetchRemovePostRequrest({ payload }: RemovePostActionInterface) {\r\n  try {\r\n    yield call(PostsApi.removePost, payload);\r\n  } catch (error) {\r\n    alert('Ошибка при удалении твита');\r\n  }\r\n}\r\n\r\nexport function* fetchUpdatePostRequrest({ payload }: UpdatePostActionInterface) {\r\n  try {\r\n    yield call(PostsApi.updatePost, payload);\r\n  } catch (error) {\r\n    yield put(setPostsLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* fetchToggleLikePostRequrest({ payload }: FetchToggleLikePostActionInterface) {\r\n  try {\r\n    const userLike: Pick<User, '_id' | 'fullname' | 'avatar'> = yield select(selectUserData);\r\n\r\n    yield put(\r\n      toggleLikePost({\r\n        id: payload,\r\n        user: {\r\n          _id: userLike._id as string,\r\n          fullname: userLike.fullname,\r\n          avatar: userLike.avatar as string,\r\n        },\r\n      }),\r\n    );\r\n\r\n    yield call(PostsApi.toggleLikePost, payload);\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(setPostsLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* postsSaga() {\r\n  yield takeLatest(PostsActionsType.FETCH_POSTS, fetchPostsRequest);\r\n  yield takeLatest(PostsActionsType.FETCH_ADD_POST, fetchAddPostRequest);\r\n  yield takeLatest(PostsActionsType.REMOVE_POST, fetchRemovePostRequrest);\r\n  yield takeLatest(PostsActionsType.UPDATE_POST, fetchUpdatePostRequrest);\r\n  yield takeLatest(PostsActionsType.FETCH_TOGGLE_LIKE_POST, fetchToggleLikePostRequrest);\r\n}\r\n","import { AuthApi } from './../../api/AuthApi';\r\nimport { LoadingStatus, UserStatus } from './../types';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { setUserLoadingStatus, setUserData, verifyEmailStatus, setMeId } from './actionCreators';\r\nimport {\r\n  FetchSignInActionInterface,\r\n  FetchSignUpActionInterface,\r\n  UserActionsType,\r\n  VerifyEmailActionInterface,\r\n} from './contracts/actionTypes';\r\n\r\nexport function* fetchSignUpRequest({ payload }: FetchSignUpActionInterface) {\r\n  try {\r\n    yield put(setUserLoadingStatus(LoadingStatus.LOADING));\r\n    yield call(AuthApi.signUp, payload);\r\n    yield put(setUserLoadingStatus(LoadingStatus.SUCCESS));\r\n  } catch (error) {\r\n    yield put(setUserLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* fetchSignInRequest({ payload }: FetchSignInActionInterface) {\r\n  try {\r\n    yield put(setUserLoadingStatus(LoadingStatus.LOADING));\r\n    const { data } = yield call(AuthApi.signIn, payload);\r\n    window.localStorage.setItem('token', data.token);\r\n    yield put(setUserData(data));\r\n    yield put(setMeId(data._id));\r\n  } catch (error) {\r\n    yield put(setUserLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* fetchUserDataRequest() {\r\n  try {\r\n    yield put(setUserLoadingStatus(LoadingStatus.LOADING));\r\n    const { data } = yield call(AuthApi.getMe);\r\n\r\n    yield put(setUserData(data));\r\n    yield put(setMeId(data._id));\r\n  } catch (error) {\r\n    yield put(setUserLoadingStatus(UserStatus.UNAUTHORIZED));\r\n  }\r\n}\r\n\r\nexport function* verifyEmailRequest({ payload }: VerifyEmailActionInterface) {\r\n  try {\r\n    yield put(setUserLoadingStatus(LoadingStatus.LOADING));\r\n    const { status, data } = yield call(AuthApi.verify, payload);\r\n\r\n    if (status === 'success') {\r\n      window.localStorage.setItem('token', data.token);\r\n      yield put(verifyEmailStatus(true));\r\n    } else {\r\n      yield put(verifyEmailStatus(false));\r\n    }\r\n\r\n    yield put(setUserLoadingStatus(LoadingStatus.SUCCESS));\r\n  } catch (error) {\r\n    yield put(setUserLoadingStatus(LoadingStatus.ERROR));\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(UserActionsType.FETCH_SIGN_UP, fetchSignUpRequest);\r\n  yield takeLatest(UserActionsType.FETCH_SIGN_IN, fetchSignInRequest);\r\n  yield takeLatest(UserActionsType.VERIFY_EMAIL, verifyEmailRequest);\r\n  yield takeLatest(UserActionsType.FETCH_USER_DATA, fetchUserDataRequest);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { dialogsSaga } from './dialogs/sagas';\r\nimport { messagesSaga } from './messages/sagas';\r\nimport { postSaga } from './post/sagas';\r\nimport { postsSaga } from './posts/sagas';\r\nimport { userSaga } from './user/sagas';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([postsSaga(), postSaga(), userSaga(), dialogsSaga(), messagesSaga()]);\r\n}\r\n","import { MessagesState } from './messages/contracts/state';\r\nimport { DialogsState } from './dialogs/contracts/state';\r\nimport { UserState } from './user/contracts/state';\r\nimport { PostsState } from './posts/contracts/state';\r\nimport { rootReducer } from './rootReducer';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './saga';\r\nimport { PostState } from './post/contracts/state';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\nconst composeEnhancers =\r\n  (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport interface RootState {\r\n  posts: PostsState;\r\n  post: PostState;\r\n  user: UserState;\r\n  dialogs: DialogsState;\r\n  messages: MessagesState;\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/app.scss';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}